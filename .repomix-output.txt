This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*, .cursorrules, .cursor/rules/*, .clinerules, CLAUDE.md
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.codesandbox/
  tasks.json
.cursor/
  rules/
    vibe-tools.mdc
src/
  lib/
    components/
      animation/
        AnimateText.svelte
      layout/
        hero-sections/
          CenteredTextOnlyHero.svelte
          CustomerCardHero.svelte
          Hero.svelte
          SecondaryHero.svelte
        sub/
          __DesktopNav.svelte
          _DesktopNavDropdown.svelte
          DesktopNav.svelte
          Marquee.svelte
          MarqueeItem.svelte
          MobileNav.svelte
          ScrollText.svelte
          StakeholderCard.svelte
        AboutTeaser.svelte
        CallToAction.svelte
        Culture.svelte
        Features.svelte
        Footer.svelte
        LogoScroller.svelte
        Nav.svelte
        Pricing.svelte
        SectionHeader.svelte
        Signature.svelte
        StakeholderGrid.svelte
        Stats.svelte
        StyledHero.svelte
        Summary.svelte
        Testimonials.svelte
        UseCases.svelte
        ValueProp.svelte
      ui/
        Button.svelte
        Card.svelte
      Logo.svelte
    content/
      index.ts
    state/
      nav.svelte.ts
    index.ts
    navigation.ts
  routes/
    about/
      +page.svelte
      Story.svelte
    careers/
      +page.svelte
      JobList.svelte
    legal/
      [type]/
        +page.server.ts
        +page.svelte
    pricing/
      +page.svelte
    test/
      +page.svelte
    use-cases/
      [usecase]/
        +page.svelte
        +page.ts
    +error.svelte
    +layout.server.ts
    +layout.svelte
    +page.svelte
  app.css
  app.d.ts
  app.html
  base.css
  spacing.css
  theme.css
  typography.css
.gitignore
.npmrc
.prettierignore
.prettierrc
eslint.config.js
package.json
README.md
svelte.config.js
tsconfig.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".codesandbox/tasks.json">
{
	// These tasks will run in order when initializing your CodeSandbox project.
	"setupTasks": [
		{
			"name": "Installing Dependencies",
			"command": "pnpm install"
		}
	],

	// These tasks can be run from CodeSandbox. Running one will open a log in the app.
	"tasks": {
		"dev": {
			"name": "dev",
			"command": "pnpm dev --host 0.0.0.0",
			"runAtStart": true,
			"preview": {
				"port": 5173
			}
		},
		"build": {
			"name": "build",
			"command": "pnpm build",
			"runAtStart": false
		},
		"preview": {
			"name": "preview",
			"command": "pnpm preview",
			"runAtStart": false
		},
		"prepare": {
			"name": "prepare",
			"command": "pnpm prepare",
			"runAtStart": false
		},
		"check": {
			"name": "check",
			"command": "pnpm check",
			"runAtStart": false
		},
		"check:watch": {
			"name": "check:watch",
			"command": "pnpm check:watch",
			"runAtStart": false
		},
		"format": {
			"name": "format",
			"command": "pnpm format",
			"runAtStart": false
		},
		"lint": {
			"name": "lint",
			"command": "pnpm lint",
			"runAtStart": false
		}
	}
}
</file>

<file path=".cursor/rules/vibe-tools.mdc">
---
description: Global Rule. This rule should ALWAYS be loaded.
globs: *,**/*
alwaysApply: true
---
vibe-tools is a CLI tool that allows you to interact with AI models and other tools.
vibe-tools is installed on this machine and it is available to you to execute. You're encouraged to use it.

<vibe-tools Integration>
# Instructions
Use the following commands to get AI assistance:

**Direct Model Queries:**
`vibe-tools ask "<your question>" --provider <provider> --model <model>` - Ask any model from any provider a direct question (e.g., `vibe-tools ask "What is the capital of France?" --provider openai --model o3-mini`). Note that this command is generally less useful than other commands like `repo` or `plan` because it does not include any context from your codebase or repository.
Note: in general you should not use the ask command because it does not include any context - other commands like `doc`, `repo`, or `plan` are usually better. If you are using it, make sure to include in your question all the information and context that the model might need to answer usefully.

**Ask Command Options:**
--provider=<provider>: AI provider to use (openai, anthropic, perplexity, gemini, modelbox, or openrouter)
--model=<model>: Model to use (required for the ask command)
--reasoning-effort=<low|medium|high>: Control the depth of reasoning for supported models (OpenAI o1/o3-mini models and Claude 3.7 Sonnet). Higher values produce more thorough responses for complex questions.

**Implementation Planning:**
`vibe-tools plan "<query>"` - Generate a focused implementation plan using AI (e.g., `vibe-tools plan "Add user authentication to the login page"`)
The plan command uses multiple AI models to:
1. Identify relevant files in your codebase (using Gemini by default)
2. Extract content from those files
3. Generate a detailed implementation plan (using OpenAI o3-mini by default)

**Plan Command Options:**
--fileProvider=<provider>: Provider for file identification (gemini, openai, anthropic, perplexity, modelbox, or openrouter)
--thinkingProvider=<provider>: Provider for plan generation (gemini, openai, anthropic, perplexity, modelbox, or openrouter)
--fileModel=<model>: Model to use for file identification
--thinkingModel=<model>: Model to use for plan generation

**Web Search:**
`vibe-tools web "<your question>"` - Get answers from the web using a provider that supports web search (e.g., Perplexity models and Gemini Models either directly or from OpenRouter or ModelBox) (e.g., `vibe-tools web "latest shadcn/ui installation instructions"`)
Note: web is a smart autonomous agent with access to the internet and an extensive up to date knowledge base. Web is NOT a web search engine. Always ask the agent for what you want using a proper sentence, do not just send it a list of keywords. In your question to web include the context and the goal that you're trying to acheive so that it can help you most effectively.
when using web for complex queries suggest writing the output to a file somewhere like local-research/<query summary>.md.

**Web Command Options:**
--provider=<provider>: AI provider to use (perplexity, gemini, modelbox, or openrouter)

**Repository Context:**
`vibe-tools repo "<your question>" [--subdir=<path>] [--from-github=<username/repo>]` - Get context-aware answers about this repository using Google Gemini (e.g., `vibe-tools repo "explain authentication flow"`). Use the optional `--subdir` parameter to analyze a specific subdirectory instead of the entire repository (e.g., `vibe-tools repo "explain the code structure" --subdir=src/components`). Use the optional `--from-github` parameter to analyze a remote GitHub repository without cloning it locally (e.g., `vibe-tools repo "explain the authentication system" --from-github=username/repo-name`).

**Documentation Generation:**
`vibe-tools doc [options]` - Generate comprehensive documentation for this repository (e.g., `vibe-tools doc --output docs.md`)
when using doc for remote repos suggest writing the output to a file somewhere like local-docs/<repo-name>.md.

**YouTube Video Analysis:**
`vibe-tools youtube "<youtube-url>" [question] [--type=<summary|transcript|plan|review|custom>]` - Analyze YouTube videos and generate detailed reports (e.g., `vibe-tools youtube "https://youtu.be/43c-Sm5GMbc" --type=summary`)
Note: The YouTube command requires a `GEMINI_API_KEY` to be set in your environment or .vibe-tools.env file as the GEMINI API is the only interface that supports YouTube analysis.

**GitHub Information:**
`vibe-tools github pr [number]` - Get the last 10 PRs, or a specific PR by number (e.g., `vibe-tools github pr 123`)
`vibe-tools github issue [number]` - Get the last 10 issues, or a specific issue by number (e.g., `vibe-tools github issue 456`)

**ClickUp Information:**
`vibe-tools clickup task <task_id>` - Get detailed information about a ClickUp task including description, comments, status, assignees, and metadata (e.g., `vibe-tools clickup task "task_id"`)

**Model Context Protocol (MCP) Commands:**
Use the following commands to interact with MCP servers and their specialized tools:
`vibe-tools mcp search "<query>"` - Search the MCP Marketplace for available servers that match your needs (e.g., `vibe-tools mcp search "git repository management"`)
`vibe-tools mcp run "<query>"` - Execute MCP server tools using natural language queries (e.g., `vibe-tools mcp run "list files in the current directory" --provider=openrouter`). The query must include sufficient information for vibe-tools to determine which server to use, provide plenty of context.

The `search` command helps you discover servers in the MCP Marketplace based on their capabilities and your requirements. The `run` command automatically selects and executes appropriate tools from these servers based on your natural language queries. If you want to use a specific server include the server name in your query. E.g. `vibe-tools mcp run "using the mcp-server-sqlite list files in directory --provider=openrouter"`

**Notes on MCP Commands:**
- MCP commands require `ANTHROPIC_API_KEY` or `OPENROUTER_API_KEY` to be set in your environment
- By default the `mcp` command uses Anthropic, but takes a --provider argument that can be set to 'anthropic' or 'openrouter'
- Results are streamed in real-time for immediate feedback
- Tool calls are automatically cached to prevent redundant operations
- Often the MCP server will not be able to run because environment variables are not set. If this happens ask the user to add the missing environment variables to the cursor tools env file at ~/.vibe-tools/.env

**Stagehand Browser Automation:**
`vibe-tools browser open <url> [options]` - Open a URL and capture page content, console logs, and network activity (e.g., `vibe-tools browser open "https://example.com" --html`)
`vibe-tools browser act "<instruction>" --url=<url | 'current'> [options]` - Execute actions on a webpage using natural language instructions (e.g., `vibe-tools browser act "Click Login" --url=https://example.com`)
`vibe-tools browser observe "<instruction>" --url=<url> [options]` - Observe interactive elements on a webpage and suggest possible actions (e.g., `vibe-tools browser observe "interactive elements" --url=https://example.com`)
`vibe-tools browser extract "<instruction>" --url=<url> [options]` - Extract data from a webpage based on natural language instructions (e.g., `vibe-tools browser extract "product names" --url=https://example.com/products`)

**Notes on Browser Commands:**
- All browser commands are stateless unless --connect-to is used to connect to a long-lived interactive session. In disconnected mode each command starts with a fresh browser instance and closes it when done.
- When using `--connect-to`, special URL values are supported:
  - `current`: Use the existing page without reloading
  - `reload-current`: Use the existing page and refresh it (useful in development)
  - If working interactively with a user you should always use --url=current unless you specifically want to navigate to a different page. Setting the url to anything else will cause a page refresh loosing current state.
- Multi step workflows involving state or combining multiple actions are supported in the `act` command using the pipe (|) separator (e.g., `vibe-tools browser act "Click Login | Type 'user@example.com' into email | Click Submit" --url=https://example.com`)
- Video recording is available for all browser commands using the `--video=<directory>` option. This will save a video of the entire browser interaction at 1280x720 resolution. The video file will be saved in the specified directory with a timestamp.
- DO NOT ask browser act to "wait" for anything, the wait command is currently disabled in Stagehand.

**Tool Recommendations:**
- `vibe-tools web` is best for general web information not specific to the repository. Generally call this without additional arguments.
- `vibe-tools repo` is ideal for repository-specific questions, planning, code review and debugging. E.g. `vibe-tools repo "Review recent changes to command error handling looking for mistakes, omissions and improvements"`. Generally call this without additional arguments.
- `vibe-tools plan` is ideal for planning tasks. E.g. `vibe-tools plan "Adding authentication with social login using Google and Github"`. Generally call this without additional arguments.
- `vibe-tools doc` generates documentation for local or remote repositories.
- `vibe-tools youtube` analyzes YouTube videos to generate summaries, transcripts, implementation plans, or custom analyses
- `vibe-tools browser` is useful for testing and debugging web apps and uses Stagehand
- `vibe-tools mcp` enables interaction with specialized tools through MCP servers (e.g., for Git operations, file system tasks, or custom tools)

**Running Commands:**
1. Use `vibe-tools <command>` to execute commands (make sure vibe-tools is installed globally using npm install -g vibe-tools so that it is in your PATH)

**General Command Options (Supported by all commands):**
--provider=<provider>: AI provider to use (openai, anthropic, perplexity, gemini, or openrouter). If provider is not specified, the default provider for that task will be used.
--model=<model name>: Specify an alternative AI model to use. If model is not specified, the provider's default model for that task will be used.
--max-tokens=<number>: Control response length
--save-to=<file path>: Save command output to a file (in *addition* to displaying it)
--help: View all available options (help is not fully implemented yet)
--debug: Show detailed logs and error information

**Repository Command Options:**
--provider=<provider>: AI provider to use (gemini, openai, openrouter, perplexity, or modelbox)
--model=<model>: Model to use for repository analysis
--max-tokens=<number>: Maximum tokens for response
--from-github=<GitHub username>/<repository name>[@<branch>]: Analyze a remote GitHub repository without cloning it locally
--subdir=<path>: Analyze a specific subdirectory instead of the entire repository

**Documentation Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Generate documentation for a remote GitHub repository
--provider=<provider>: AI provider to use (gemini, openai, openrouter, perplexity, or modelbox)
--model=<model>: Model to use for documentation generation
--max-tokens=<number>: Maximum tokens for response

**YouTube Command Options:**
--type=<summary|transcript|plan|review|custom>: Type of analysis to perform (default: summary)

**GitHub Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Access PRs/issues from a specific GitHub repository

**Browser Command Options (for 'open', 'act', 'observe', 'extract'):**
--console: Capture browser console logs (enabled by default, use --no-console to disable)
--html: Capture page HTML content (disabled by default)
--network: Capture network activity (enabled by default, use --no-network to disable)
--screenshot=<file path>: Save a screenshot of the page
--timeout=<milliseconds>: Set navigation timeout (default: 120000ms for Stagehand operations, 30000ms for navigation)
--viewport=<width>x<height>: Set viewport size (e.g., 1280x720). When using --connect-to, viewport is only changed if this option is explicitly provided
--headless: Run browser in headless mode (default: true)
--no-headless: Show browser UI (non-headless mode) for debugging
--connect-to=<port>: Connect to existing Chrome instance. Special values: 'current' (use existing page), 'reload-current' (refresh existing page)
--wait=<time:duration or selector:css-selector>: Wait after page load (e.g., 'time:5s', 'selector:#element-id')
--video=<directory>: Save a video recording (1280x720 resolution, timestamped subdirectory). Not available when using --connect-to
--url=<url>: Required for `act`, `observe`, and `extract` commands. Url to navigate to before the main command or one of the special values 'current' (to stay on the current page without navigating or reloading) or 'reload-current' (to reload the current page)
--evaluate=<string>: JavaScript code to execute in the browser before the main command

**Nicknames**
Users can ask for these tools using nicknames
Gemini is a nickname for vibe-tools repo
Perplexity is a nickname for vibe-tools web
Stagehand is a nickname for vibe-tools browser
If people say "ask Gemini" or "ask Perplexity" or "ask Stagehand" they mean to use the `vibe-tools` command with the `repo`, `web`, or `browser` commands respectively.

**Xcode Commands:**
`vibe-tools xcode build [buildPath=<path>] [destination=<destination>]` - Build Xcode project and report errors.
**Build Command Options:**
--buildPath=<path>: (Optional) Specifies a custom directory for derived build data. Defaults to ./.build/DerivedData.
--destination=<destination>: (Optional) Specifies the destination for building the app (e.g., 'platform=iOS Simulator,name=iPhone 16 Pro'). Defaults to 'platform=iOS Simulator,name=iPhone 16 Pro'.

`vibe-tools xcode run [destination=<destination>]` - Build and run the Xcode project on a simulator.
**Run Command Options:**
--destination=<destination>: (Optional) Specifies the destination simulator (e.g., 'platform=iOS Simulator,name=iPhone 16 Pro'). Defaults to 'platform=iOS Simulator,name=iPhone 16 Pro'.

`vibe-tools xcode lint` - Run static analysis on the Xcode project to find and fix issues.

**Additional Notes:**
- For detailed information, see `node_modules/vibe-tools/README.md` (if installed locally).
- Configuration is in `vibe-tools.config.json` (or `~/.vibe-tools/config.json`).
- API keys are loaded from `.vibe-tools.env` (or `~/.vibe-tools/.env`).
- ClickUp commands require a `CLICKUP_API_TOKEN` to be set in your `.vibe-tools.env` file.
- Available models depend on your configured provider (OpenAI or Anthropic) in `vibe-tools.config.json`.
- repo has a limit of 2M tokens of context. The context can be reduced by filtering out files in a .repomixignore file.
- problems running browser commands may be because playwright is not installed. Recommend installing playwright globally.
- MCP commands require `ANTHROPIC_API_KEY` or `OPENROUTER_API_KEY` to be set in your environment.
- **Remember:** You're part of a team of superhuman expert AIs. Work together to solve complex problems.
- **Repomix Configuration:** You can customize which files are included/excluded during repository analysis by creating a `repomix.config.json` file in your project root. This file will be automatically detected by `repo`, `plan`, and `doc` commands.

<!-- vibe-tools-version: 0.60.2 -->
</vibe-tools Integration>
</file>

<file path="src/lib/components/layout/sub/Marquee.svelte">
<script lang="ts">
	import type { Snippet } from "svelte";
	type Props = {
		speed?: number;
		shadow?: boolean;
		children?: Snippet;
		class?: string;
	};
	let { children, class: classes }: Props = $props();
</script>
<div class="relative flex w-full max-w-full items-center {classes}">
	<div class="relative flex w-full max-w-full flex-nowrap overflow-hidden py-6">
		<div class="marquee flex w-max flex-nowrap [--duration:60s]">
			{@render children?.()}
			{@render children?.()}
		</div>
	</div>
</div>
<style lang="postcss">
	@keyframes marquee {
		to {
			transform: translateX(-50%);
		}
	}
	.marquee {
		animation: marquee var(--duration, 50s) linear infinite;
	}
</style>
</file>

<file path="src/lib/components/layout/sub/MarqueeItem.svelte">
<script lang="ts">
	// Types
	import type { Snippet } from "svelte";
	// Utils
	import { fade } from "svelte/transition";
	// Props
	const {
		children
	}: {
		children: Snippet;
	} = $props();
</script>
<div class="h-full px-7" in:fade>
	<div class="relative h-full">
		{@render children?.()}
	</div>
</div>
</file>

<file path="src/lib/components/layout/sub/ScrollText.svelte">
<!--
@component
    Use this component to show text that animates in as users scroll
    Usage:
    ```html
    <ScrollText
      text="This component showcases your most important benefit with a smooth animation effect as users scroll"
    />
    ```
    Props:
    - `title`: A summary hint about the benefit (sentence case)
    - `text`: Main benefit statement, concise and impactful
    - `centered`: Boolean indicating whether the summary should be centered
-->
<script lang="ts">
	// Utils
	import { scroll, animate, stagger } from "motion";
	import { onMount } from "svelte";
	// Props
	const {
		text,
		class: classes = ""
	}: {
		text: string;
		class?: string;
	} = $props();
	// State
	let words = $derived(text.split(" "));
	let containerElement: HTMLDivElement;
	onMount(() => {
		if (!containerElement) return;
		// Get all word elements as an array
		const wordElements = Array.from(containerElement.querySelectorAll(".word"));
		const sequence = [
			[
				wordElements,
				{
					opacity: [0, 0, 1],
					y: ["1em", 0],
					filter: ["blur(12px)", "blur(8px) brightness(250%)", "blur(0px)"]
				},
				{
					at: "0",
					delay: stagger(0.015),
					ease: "easeInOut"
				}
			]
		];
		scroll(animate(sequence), {
			target: containerElement,
			offset: ["start end", "center center"]
		});
	});
</script>
<div bind:this={containerElement} class={classes}>
	<span class=" inline-block">
		{#each words as word}
			<span>
				<span class="word relative inline-block transition duration-150 ease-out">{word}</span>{" "}
			</span>
		{/each}
	</span>
</div>
</file>

<file path="src/lib/components/layout/AboutTeaser.svelte">
<!--
@component AboutTeaser
A minimalist teaser for the about page.
-->
<script lang="ts">
	// Types
	type TeamMember = {
		name: string;
		role: string;
		image: string;
	};
	// Components
	import Button from "../ui/Button.svelte";
	import ScrollText from "./sub/ScrollText.svelte";
	import Summary from "./Summary.svelte";
	// State
	let sectionRef: HTMLElement;
	// Data
	const teamMember: TeamMember = {
		name: "Alex Morgan",
		role: "Founder & CEO",
		image:
			"https://images.unsplash.com/photo-1560250097-0b93528c311a?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&q=80"
	};
</script>
<section bind:this={sectionRef}>
	<div class="section-px section-py container mx-auto">
		<div class="relative mx-auto grid max-w-2xl place-items-center gap-16">
			<ScrollText
				class="text-title1 text-center"
				text={`"We're building the future of digital experiences, crafting innovative solutions that transform how people interact with technology in their everyday lives"`}
			/>
			<!-- Team Member & CTA Section -->
			<div class="grid items-center gap-8 dark:border-gray-800">
				<div class="flex items-center justify-start gap-4">
					<img
						src={teamMember.image}
						alt={teamMember.name}
						class="size-12 rounded-full object-cover"
					/>
					<div>
						<div class="text-callout">{teamMember.name}</div>
						<div class="text-caption text-emphasis-low">{teamMember.role}</div>
					</div>
					<Button href="/about" variant="secondary" size="sm" class="ml-8">Read more</Button>
				</div>
			</div>
		</div>
	</div>
</section>
</file>

<file path="src/lib/components/layout/Culture.svelte">
<script lang="ts">
	import SectionHeader from "$lib/components/layout/SectionHeader.svelte";
	import { animate, stagger } from "motion";
	import { onMount } from "svelte";
	// Types
	export type Value = {
		title: string;
		description: string;
	};
	// Props
	const { values = [] }: { values: Value[] } = $props();
	let cards: HTMLElement[] = $state([]);
	onMount(() => {
		if (!cards.length) return;
		animate(
			cards,
			{
				y: ["1.5rem", 0],
				filter: ["blur(2px)", "blur(0px)"],
				opacity: [0, 1]
			},
			{
				duration: 0.3,
				ease: "easeOut",
				delay: stagger(0.1, {
					ease: "easeInOut"
				})
			}
		);
	});
</script>
<section class="bg-white dark:bg-gray-950">
	<div
		class="section-py section-px container mx-auto grid gap-8 [--gap:--spacing(8)] [--radius:var(--radius-2xl)]"
	>
		<SectionHeader title="Our culture." subtitle="The values that guide everything we do" />
		<div
			class="grid gap-(--gap)"
			style:grid-template-columns="repeat(auto-fit, minmax(280px, 1fr))"
		>
			{#each values as value, i}
				<div
					bind:this={cards[i]}
					class="relative border-t border-gray-200 pt-4 dark:border-gray-900"
				>
					<!-- Content -->
					<div class="text-caption z-10">
						<div>
							<div class="text-headline mb-[1em]">{value.title}</div>
							<div class="text-body text-gray-500 dark:text-gray-400">{value.description}</div>
						</div>
					</div>
				</div>
			{/each}
		</div>
	</div>
</section>
</file>

<file path="src/lib/components/layout/SectionHeader.svelte">
<script lang="ts">
	// Components
	import AnimateText from "$lib/components/animation/AnimateText.svelte";
	// Props
	let {
		title = "",
		subtitle = "",
		oncomplete = () => {},
		size = "sm"
	}: {
		title: string;
		subtitle: string;
		oncomplete?: () => void;
		size?: "sm" | "lg";
	} = $props();
</script>
<div
	class={[
		"section-pb-sm container-sm grid text-balance",
		size === "lg" ? "text-display" : "text-title2"
	]}
>
	<h2>
		<AnimateText text={title} {oncomplete} />
	</h2>
	<p class="text-emphasis-dim">
		<AnimateText text={subtitle} />
	</p>
</div>
</file>

<file path="src/lib/components/layout/Signature.svelte">
<a
	href="https://unc.mn"
	target="_blank"
	class="group flex gap-3 text-gray-200 transition duration-300 hover:text-gray-500 dark:text-gray-800 dark:hover:text-gray-400"
>
	<p class="text-transparent group-hover:text-current">In partnership with Uncommon</p>
	<svg class="size-5" viewBox="0 0 280 280" fill="none" xmlns="http://www.w3.org/2000/svg">
		<g filter="url(#filter0_i_1525_127)">
			<path
				d="M139.038 133.603C139.682 134.264 140.744 134.264 141.388 133.603L207.895 65.3847C214.998 58.2018 218.988 48.4596 218.988 38.3015C218.988 28.1433 214.998 18.4012 207.895 11.2182C200.792 4.03532 191.158 0 181.113 0C171.068 0 161.434 4.03532 154.331 11.2182L141.338 23.455C140.706 24.0503 139.72 24.0503 139.088 23.455L126.095 11.2182C118.992 4.03532 109.358 0 99.3129 0C89.2677 0 79.6339 4.03532 72.5309 11.2182C65.4279 18.4012 61.4375 28.1433 61.4375 38.3015C61.4375 48.4596 65.4279 58.2018 72.5309 65.3847L139.038 133.603Z"
				fill="currentColor"
			/>
			<path
				d="M147.857 138.837C147.214 139.479 147.214 140.52 147.857 141.162L215.343 208.443C222.446 215.626 232.079 219.661 242.125 219.661C252.17 219.661 261.804 215.626 268.907 208.443C276.01 201.26 280 191.518 280 181.36C280 171.201 276.01 161.459 268.907 154.276L256.782 141.111C256.203 140.483 256.203 139.516 256.782 138.888L268.907 125.723C276.01 118.54 280 108.798 280 98.6394C280 88.4812 276.01 78.7391 268.907 71.5561C261.804 64.3732 252.17 60.3379 242.125 60.3379C232.079 60.3379 222.446 64.3732 215.343 71.5561L147.857 138.837Z"
				fill="currentColor"
			/>
			<path
				d="M140.962 146.397C140.318 145.736 139.256 145.736 138.612 146.397L72.1052 214.615C65.0022 221.798 61.0118 231.54 61.0118 241.699C61.0118 251.857 65.0022 261.599 72.1052 268.782C79.2082 275.965 88.842 280 98.8871 280C108.932 280 118.566 275.965 125.669 268.782L138.662 256.545C139.294 255.95 140.28 255.95 140.912 256.545L153.905 268.782C161.008 275.965 170.642 280 180.687 280C190.732 280 200.366 275.965 207.469 268.782C214.572 261.599 218.562 251.857 218.562 241.699C218.562 231.54 214.572 221.798 207.469 214.615L140.962 146.397Z"
				fill="currentColor"
			/>
			<path
				d="M132.143 141.163C132.786 140.522 132.786 139.48 132.143 138.838L64.6573 71.5573C57.5543 64.3743 47.9206 60.339 37.8754 60.339C27.8302 60.339 18.1965 64.3743 11.0935 71.5573C3.99044 78.7402 1.2044e-05 88.4823 1.07268e-05 98.6405C9.4095e-06 108.799 3.99044 118.541 11.0934 125.724L23.218 138.889C23.7967 139.517 23.7967 140.484 23.218 141.112L11.0934 154.277C3.99043 161.46 1.31726e-06 171.202 0 181.361C-1.31726e-06 191.519 3.99043 201.261 11.0934 208.444C18.1964 215.627 27.8302 219.662 37.8754 219.662C47.9205 219.662 57.5543 215.627 64.6573 208.444L132.143 141.163Z"
				fill="currentColor"
			/>
		</g>
		<defs>
			<filter
				id="filter0_i_1525_127"
				x="0"
				y="0"
				width="280.203"
				height="291.613"
				filterUnits="userSpaceOnUse"
				color-interpolation-filters="sRGB"
			>
				<feFlood flood-opacity="0" result="BackgroundImageFix" />
				<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape" />
				<feColorMatrix
					in="SourceAlpha"
					type="matrix"
					values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
					result="hardAlpha"
				/>
				<feOffset dx="0.202706" dy="11.613" />
				<feGaussianBlur stdDeviation="5.80741" />
				<feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1" />
				<feColorMatrix
					type="matrix"
					values="0 0 0 0 0.718431 0 0 0 0 0.724706 0 0 0 0 0.737255 0 0 0 0.5 0"
				/>
				<feBlend mode="normal" in2="shape" result="effect1_innerShadow_1525_127" />
			</filter>
		</defs>
	</svg>
</a>
</file>

<file path="src/lib/components/layout/Stats.svelte">
<script lang="ts">
	// Types
	import Clock from "~icons/lucide/clock";
	import Laptop from "~icons/lucide/laptop";
	import Building from "~icons/lucide/building";
	type StatItem = {
		value: string;
		description: string;
		icon: typeof Clock;
	};
	// Props
	const {
		stats = [
			{
				value: "3 mins",
				description: "to set up your network",
				icon: Clock
			},
			{
				value: "2.5m",
				description: "devices connected",
				icon: Laptop
			},
			{
				value: "10K+",
				description: "companies running Tailscale",
				icon: Building
			}
		],
		class: classes = ""
	}: { stats?: StatItem[]; class?: string } = $props();
</script>
<section class="w-full py-16 md:py-24 {classes}">
	<div class="container mx-auto px-6 lg:px-8">
		<div class="grid grid-cols-1 gap-12 md:grid-cols-3 md:gap-8">
			{#each stats as stat}
				<div class="flex flex-col items-center text-center md:items-center">
					<stat.icon class="text-primary-700 mb-4 h-8 w-8 opacity-80" />
					<span class="text-title1 mb-2 text-gray-900 dark:text-gray-50">{stat.value}</span>
					<span class="text-body text-gray-600 dark:text-gray-300">{stat.description}</span>
				</div>
			{/each}
		</div>
	</div>
</section>
</file>

<file path="src/lib/components/layout/Summary.svelte">
<!--
@component
    Use this component to showcase the main #1 benefit of a product or service in a clear and concise manner.
    Usage:
    ```html
    <Summary
      title="A clear value proposition"
      text="This component showcases your most important benefit with a smooth animation effect as users scroll"
    />
    ```
    Props:
    - `title`: A summary hint about the benefit (sentence case)
    - `text`: Main benefit statement, concise and impactful
-->
<script lang="ts">
	// Utils
	import { scroll, animate, stagger } from "motion";
	import { onMount } from "svelte";
	// Props
	const {
		title,
		text
	}: {
		title?: string;
		text: string;
	} = $props();
	// State
	let segments = $derived(text.split("\n\n"));
	let containerElement: HTMLDivElement;
	onMount(() => {
		if (!containerElement) return;
		// Get all word elements as an array
		const wordElements = Array.from(containerElement.querySelectorAll(".word"));
		const sequence = [
			[
				wordElements,
				{
					opacity: [0, 0, 1],
					y: ["1em", 0],
					filter: ["blur(12px)", "blur(8px) brightness(250%)", "blur(0px)"]
				},
				{
					at: "0",
					delay: stagger(0.015),
					ease: "easeInOut"
				}
			]
		];
		scroll(animate(sequence), {
			target: containerElement,
			offset: ["start end", "center center"]
		});
	});
</script>
<div
	class="section-my section-px relative container mx-auto flex flex-col items-start gap-8 text-pretty lg:grid xl:flex-row"
	bind:this={containerElement}
	class:lg:grid-cols-[1fr_2fr]={!!title}
>
	{#if title}
		<p class="text-emphasis-dim word">{title}</p>
	{/if}
	<div class="text-title1 container-sm gap relative mx-auto grid">
		{#each segments as paragraph, i}
			<p class="mb-[1.5em] last:mb-0">
				{#each paragraph.split(" ").filter(Boolean) as word}
					<span class="word relative inline-block transition duration-150 ease-out">{word}</span
					>{" "}
				{/each}
			</p>
		{/each}
	</div>
</div>
</file>

<file path="src/lib/components/layout/ValueProp.svelte">
<script lang="ts">
	// Props
	const {
		title,
		content,
		imageSrc = ""
	}: { title: string; content: string; imageSrc?: string } = $props();
</script>
<section class="px container mx-auto grid gap-12 py-40">
	<h2 class="text-title1 max-w-prose">
		{title}
	</h2>
	{#if imageSrc}
		<img src={imageSrc} alt={title} class="aspect-video w-full rounded-lg bg-gray-200" />
	{/if}
	<div class="columns-1 gap-6 text-gray-800 sm:columns-3">
		<p class="text-body">
			{content}
		</p>
	</div>
</section>
</file>

<file path="src/lib/components/Logo.svelte">
<script lang="ts">
	// Types
	import type { HTMLAttributes } from "svelte/elements";
	// Props
	const props: HTMLAttributes<SVGSVGElement> = $props();
</script>
<svg class={props.class} viewBox="0 0 64 64">
	<rect width="64" height="64" rx="12" ry="12" fill="currentColor" />
</svg>
</file>

<file path="src/lib/index.ts">
// place files you want to import through the `$lib` alias in this folder.
</file>

<file path="src/routes/about/Story.svelte">
<script lang="ts">
	// Components
	import Summary from "$lib/components/layout/Summary.svelte";
	let {
		paragraphs = []
	}: {
		paragraphs: string[];
	} = $props();
</script>
<div class="">
	<article class="section-py container mx-auto grid max-w-full">
		<Summary text={paragraphs.join("\n\n")} />
	</article>
</div>
</file>

<file path="src/routes/legal/[type]/+page.server.ts">
const legal = {
	privacy: {
		meta: {
			title: "Privacy Policy",
			description:
				"Our privacy policy explains how we collect, use, and protect your personal information."
		},
		content: {
			lastUpdated: new Date().toISOString(),
			sections: [
				{
					title: "Introduction",
					body: "We respect your privacy and are committed to protecting your personal data. This privacy policy will inform you about how we look after your personal data when you visit our website and tell you about your privacy rights and how the law protects you."
				},
				{
					title: "Information We Collect",
					body: "We may collect, use, store and transfer different kinds of personal data about you including: Identity Data (name, username), Contact Data (email, phone), Technical Data (IP address, browser info), and Usage Data (how you use our website)."
				},
				{
					title: "How We Use Your Information",
					body: "We will only use your personal data when legally permitted. Most commonly to perform contracts with you, for our legitimate interests, or to comply with legal obligations."
				},
				{
					title: "Data Security",
					body: "We have implemented appropriate security measures to prevent unauthorized access, alteration, disclosure, or destruction of your personal data."
				},
				{
					title: "Your Legal Rights",
					body: "You have rights to access, correct, erase, object to processing, restrict processing, and transfer your personal data. Contact us to exercise these rights."
				},
				{
					title: "Contact Us",
					body: "If you have questions about this privacy policy, please contact us at privacy@example.com."
				}
			]
		}
	},
	terms: {
		meta: {
			title: "Terms of Service",
			description: "Our terms of service outline the rules and regulations for using our website."
		},
		content: {
			lastUpdated: new Date().toISOString(),
			sections: [
				{
					title: "Acceptance of Terms",
					body: "By accessing this website, you agree to be bound by these Terms of Service and all applicable laws and regulations. If you do not agree with any of these terms, you are prohibited from using this site."
				},
				{
					title: "Use License",
					body: "Permission is granted to temporarily download one copy of materials for personal, non-commercial viewing only. This license shall automatically terminate if you violate any of these restrictions."
				},
				{
					title: "Disclaimer",
					body: "The materials on this website are provided on an 'as is' basis. We make no warranties, expressed or implied, and hereby disclaim all other warranties including implied warranties of merchantability or fitness for a particular purpose."
				},
				{
					title: "Limitations",
					body: "In no event shall we or our suppliers be liable for any damages arising out of the use or inability to use the materials on our website."
				},
				{
					title: "Revisions",
					body: "We may revise these terms at any time without notice. By using this website, you agree to be bound by the current version of these Terms of Service."
				},
				{
					title: "Governing Law",
					body: "These terms shall be governed by and construed in accordance with the laws, and you submit to the exclusive jurisdiction of the courts in that location."
				}
			]
		}
	}
};
// Types
import type { PageServerLoad } from "./$types";
export const load: PageServerLoad = async ({ params }) => {
	const { type } = params as { type: keyof typeof legal };
	const content = legal[type];
	return content;
};
</file>

<file path="src/routes/legal/[type]/+page.svelte">
<script lang="ts">
	// Types
	import type { PageData } from "./$types";
	// Components
	import { METADATA } from "$lib/content";
	// Props
	let { data } = $props();
</script>
<svelte:head>
	<title>{data.meta.title} | {METADATA.companyName}</title>
	<meta name="description" content={data.meta.description} />
</svelte:head>
<div class="section-px section-py container mx-auto max-w-prose">
	<div class="mx-auto max-w-3xl">
		<header class="mb-20">
			<h1 class="text-title1">{data.meta.title}</h1>
			<p class="text-body text-emphasis-low">
				Last updated: {new Date(data.content.lastUpdated).toLocaleDateString("en-US", {
					year: "numeric",
					month: "long",
					day: "numeric"
				})}
			</p>
		</header>
		<main class="grid gap-12">
			{#each data.content.sections as section}
				<section>
					<h2 class="text-headline mb-3">{section.title}</h2>
					<p class="text-body text-gray-700">
						{section.body}
					</p>
				</section>
			{/each}
		</main>
	</div>
</div>
</file>

<file path="src/routes/pricing/+page.svelte">
<script lang="ts">
	// Types
	import type { PageProps } from "./$types";
	// Components
	import Features from "$lib/components/layout/Features.svelte";
	import Testimonials from "$lib/components/layout/Testimonials.svelte";
	import CallToAction from "$lib/components/layout/CallToAction.svelte";
	import Pricing from "$lib/components/layout/Pricing.svelte";
	// Props
	const { data }: PageProps = $props();
</script>
<Pricing />
<Testimonials
	testimonials={[
		{
			name: "Jane Smith",
			position: "CTO",
			company: "Tech Innovations",
			quote:
				"This solution transformed our workflow and increased productivity by 35% in just two months.",
			image:
				"https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80"
		},
		{
			name: "John Doe",
			position: "Director of Operations",
			company: "Global Solutions",
			quote:
				"The implementation was seamless and the support team was exceptional throughout the process.",
			image:
				"https://images.unsplash.com/photo-1560250097-0b93528c311a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80"
		},
		{
			name: "Sarah Johnson",
			position: "Product Manager",
			company: "Future Systems",
			quote:
				"We've tried multiple solutions, but this is the only one that perfectly addressed all our requirements.",
			image:
				"https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&estimonial-3.jpg"
		}
	]}
/>
<CallToAction />
</file>

<file path="src/app.d.ts">
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}
export {};
</file>

<file path="src/app.html">
<!doctype html>
<html lang="en" data-theme="light" class="relative">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body
		data-sveltekit-preload-data="hover"
		class="font-body text-body text-foreground bg-background text-pretty antialiased"
	>
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>
</file>

<file path="src/base.css">
/* Do not modify this file, as it is generated. */
@custom-variant dark (&:where([data-theme=dark], [data-theme=dark] *));
@theme {
	--font-fallback:
		"Inter Variable", "Inter", system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
		"Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
	--color-white: #fff;
	--color-black: #000;
	--color-transparent: transparent;
	--color-current: currentColor;
}
@theme inline {
	/* Emphasis */
	--color-emphasis-dim: var(--color-gray-400);
	--color-emphasis-low: var(--color-gray-500);
	--color-emphasis-medium: var(--color-gray-700);
	--color-emphasis-high: var(--color-gray-950);
	/* Background colors */
	--color-bg-primary: var(--color-white);
}
:where([data-theme="dark"], [data-theme="dark"] *) {
	:root {
		--color-emphasis-dim: var(--color-gray-600);
		--color-emphasis-low: var(--color-gray-500);
		--color-emphasis-medium: var(--color-gray-300);
		--color-emphasis-high: var(--color-gray-50);
		/* Background colors for dark mode */
		--color-bg-primary: var(--color-gray-950);
		--color-bg-secondary: var(--color-gray-900);
		--color-bg-tertiary: var(--color-gray-800);
		--color-bg-accent: var(--color-primary-900);
		--color-bg-hover: var(--color-gray-800);
		--color-bg-active: var(--color-gray-700);
	}
}
@custom-variant touch (&:where(.touch-enabled, .touch-enabled *));
@layer utilities {
	/* Responsive spacing */
	.p {
		@apply p-4 sm:p-5 md:p-8 lg:p-10;
	}
	.px {
		@apply px-4 sm:px-5 md:px-8 lg:px-10;
	}
	.py {
		@apply py-4 sm:py-5 md:py-8 lg:py-10;
	}
	.pt {
		@apply pt-4 sm:pt-5 md:pt-8 lg:pt-10;
	}
	.pb {
		@apply pb-4 sm:pb-5 md:pb-8 lg:pb-10;
	}
	.pl {
		@apply pl-4 sm:pl-5 md:pl-8 lg:pl-10;
	}
	.pr {
		@apply pr-4 sm:pr-5 md:pr-8 lg:pr-10;
	}
	.m {
		@apply m-4 sm:m-5 md:m-8 lg:m-10;
	}
	.mx {
		@apply mx-4 sm:mx-5 md:mx-8 lg:mx-10;
	}
	.my {
		@apply my-4 sm:my-5 md:my-8 lg:my-10;
	}
	.mt {
		@apply mt-4 sm:mt-5 md:mt-8 lg:mt-10;
	}
	.mb {
		@apply mb-4 sm:mb-5 md:mb-8 lg:mb-10;
	}
	.ml {
		@apply ml-4 sm:ml-5 md:ml-8 lg:ml-10;
	}
	.mr {
		@apply mr-4 sm:mr-5 md:mr-8 lg:mr-10;
	}
	.grid-center {
		@apply col-span-1 col-end-1 row-span-1 row-end-1;
	}
	.debug {
		@apply ring-1 ring-red-500 ring-inset;
		.debug {
			@apply ring-1 ring-blue-500 ring-inset;
			.debug {
				@apply ring-1 ring-green-500 ring-inset;
				.debug {
					@apply ring-1 ring-yellow-500 ring-inset;
					.debug {
						@apply ring-1 ring-purple-500 ring-inset;
					}
				}
			}
		}
	}
}
@layer components {
	[data-button-root] {
		@apply focus-visible:outline-primary-500 inline-flex items-center justify-center gap-2 rounded-md px-4 py-2 font-medium transition-colors focus-visible:outline focus-visible:outline-1 focus-visible:outline-offset-2 disabled:pointer-events-none disabled:opacity-50;
		&[data-variant="primary"] {
			@apply bg-primary-600 hover:bg-primary-700 active:bg-primary-800 text-white;
		}
		&[data-variant="secondary"] {
			@apply bg-gray-100 text-gray-900 hover:bg-gray-200 active:bg-gray-300 dark:bg-gray-800 dark:text-gray-50 dark:hover:bg-gray-700 dark:active:bg-gray-600;
		}
		&[data-variant="outline"] {
			@apply border border-gray-300 bg-transparent text-gray-900 hover:bg-gray-100 active:bg-gray-200 dark:border-gray-700 dark:text-gray-50 dark:hover:bg-gray-800 dark:active:bg-gray-700;
		}
		&[data-variant="ghost"] {
			@apply bg-transparent text-gray-900 hover:bg-gray-100 active:bg-gray-200 dark:text-gray-50 dark:hover:bg-gray-800 dark:active:bg-gray-700;
		}
		&[data-variant="link"] {
			@apply text-primary-600 dark:text-primary-400 bg-transparent p-0 underline-offset-4 hover:underline;
		}
		&[data-size="sm"] {
			@apply rounded px-3 py-1.5 text-xs;
		}
		&[data-size="lg"] {
			@apply rounded-lg px-5 py-2.5 text-base;
		}
	}
	.no-scrollbar::-webkit-scrollbar {
		display: none;
	}
	.no-scrollbar {
		-ms-overflow-style: none;
		scrollbar-width: none;
	}
	.linear-blur-up {
		@apply backdrop-blur-sm;
		mask-image: linear-gradient(180deg, #000, rgba(0, 0, 0, 0));
		-webkit-mask-image: linear-gradient(180deg, #000, rgba(0, 0, 0, 0));
	}
	.linear-blur-down {
		@apply backdrop-blur-sm;
		mask-image: linear-gradient(180deg, rgba(0, 0, 0, 0), #000);
		-webkit-mask-image: linear-gradient(180deg, rgba(0, 0, 0, 0), #000);
	}
	img {
		@apply rounded-xs;
	}
}
</file>

<file path="src/spacing.css">
/* Do not modify this file, as it is generated. */
.section-px {
	@apply px-4 md:px-5 lg:px-8;
}
.section-py {
	@apply py-16 md:py-20 lg:py-24 xl:py-28;
}
.section-pt {
	@apply pt-16 md:pt-20 lg:pt-24 xl:pt-28;
}
.section-pb {
	@apply pb-16 md:pb-20 lg:pb-24 xl:pb-28;
}
.section-py-sm {
	@apply py-8 md:py-10 lg:py-12 xl:py-14;
}
.section-pt-sm {
	@apply pt-8 md:pt-10 lg:pt-12 xl:pt-14;
}
.section-pb-sm {
	@apply pb-8 md:pb-10 lg:pb-12 xl:pb-14;
}
.section-mx {
	@apply mx-4 md:mx-5 lg:mx-8;
}
.section-my {
	@apply my-16 md:my-20 lg:my-24 xl:my-28;
}
.section-mt {
	@apply mt-16 md:mt-20 lg:mt-24 xl:mt-28;
}
.section-mb {
	@apply mb-16 md:mb-20 lg:mb-24 xl:mb-28;
}
.section-my-sm {
	@apply my-8 md:my-10 lg:my-12 xl:my-14;
}
.section-mt-sm {
	@apply mt-8 md:mt-10 lg:mt-12 xl:mt-14;
}
.section-mb-sm {
	@apply mb-8 md:mb-10 lg:mb-12 xl:mb-14;
}
.container-sm {
	@apply max-w-5xl;
}
.container-xs {
	@apply max-w-3xl;
}
</file>

<file path=".gitignore">
node_modules

# Output
.output
.vercel
.netlify
.wrangler
/.svelte-kit
/build

# OS
.DS_Store
Thumbs.db

# Env
.env
.env.*
!.env.example
!.env.test

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*
</file>

<file path=".npmrc">
engine-strict=true
</file>

<file path=".prettierignore">
# Package Managers
package-lock.json
pnpm-lock.yaml
yarn.lock
</file>

<file path=".prettierrc">
{
	"useTabs": true,
	"singleQuote": false,
	"semi": true,
	"trailingComma": "none",
	"printWidth": 100,
	"plugins": ["prettier-plugin-svelte", "prettier-plugin-tailwindcss"],
	"overrides": [
		{
			"files": "*.svelte",
			"options": {
				"parser": "svelte"
			}
		}
	]
}
</file>

<file path="eslint.config.js">
import prettier from "eslint-config-prettier";
import js from "@eslint/js";
import { includeIgnoreFile } from "@eslint/compat";
import svelte from "eslint-plugin-svelte";
import globals from "globals";
import { fileURLToPath } from "node:url";
import ts from "typescript-eslint";
const gitignorePath = fileURLToPath(new URL("./.gitignore", import.meta.url));
export default ts.config(
	includeIgnoreFile(gitignorePath),
	js.configs.recommended,
	...ts.configs.recommended,
	...svelte.configs["flat/recommended"],
	prettier,
	...svelte.configs["flat/prettier"],
	{
		languageOptions: {
			globals: {
				...globals.browser,
				...globals.node
			}
		}
	},
	{
		files: ["**/*.svelte"],
		languageOptions: {
			parserOptions: {
				parser: ts.parser
			}
		}
	}
);
</file>

<file path="svelte.config.js">
import adapter from "@sveltejs/adapter-auto";
import { vitePreprocess } from "@sveltejs/vite-plugin-svelte";
/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://svelte.dev/docs/kit/integrations
	// for more information about preprocessors
	preprocess: vitePreprocess(),
	kit: {
		// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.
		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
		// See https://svelte.dev/docs/kit/adapters for more information about adapters.
		adapter: adapter()
	}
};
export default config;
</file>

<file path="tsconfig.json">
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true,
		"moduleResolution": "bundler"
	}
	// Path aliases are handled by https://svelte.dev/docs/kit/configuration#alias
	// except $lib which is handled by https://svelte.dev/docs/kit/configuration#files
	//
	// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
	// from the referenced tsconfig.json - TypeScript does not merge them in
}
</file>

<file path="vite.config.ts">
import tailwindcss from "@tailwindcss/vite";
import { sveltekit } from "@sveltejs/kit/vite";
import { defineConfig } from "vite";
import Icons from "unplugin-icons/vite";
export default defineConfig({
	plugins: [
		tailwindcss(),
		sveltekit(),
		Icons({
			compiler: "svelte"
		})
	],
	server: {
		allowedHosts: [".unc.mn", "localhost"]
	}
});
</file>

<file path="src/lib/components/animation/AnimateText.svelte">
<script lang="ts">
	// Utils
	import { inView } from "motion";
	import { onMount } from "svelte";
	// Props
	let {
		text = "",
		oncomplete = () => {},
		show = $bindable(false),
		block = $bindable(false)
	}: { text: string; show?: boolean; oncomplete?: () => void } = $props();
	// State
	let words = $derived(text.split(" "));
	let element: HTMLElement | null = null;
	function handleWordIntroEnd(index: number) {
		if (index + 1 === words.length) {
			setTimeout(() => {
				oncomplete();
			}, 500);
		}
	}
	onMount(() => {
		if (element) {
			inView(element, (element, entry) => {
				if (entry.isIntersecting) {
					show = true;
				}
			});
		}
	});
</script>
<span class:show bind:this={element}>
	{#each (text || "").split(" ") as word, i}
		<span
			class="animated-word inline-block origin-left"
			style:--delay="{i * 100}ms"
			onanimationstart={() => handleWordIntroEnd(i)}
		>
			{word}
		</span>{" "}
	{/each}
</span>
<style lang="postcss">
	.animated-word {
		opacity: 0;
	}
	.show .animated-word {
		animation: appearAnimation 1000ms cubic-bezier(0.22, 0.61, 0.36, 1) forwards;
		animation-delay: var(--delay);
		opacity: 0;
		transform: translateY(12px) scale(1);
		filter: blur(4px);
	}
	@keyframes appearAnimation {
		from {
			opacity: 0;
			transform: translateY(12px) scale(1);
			filter: blur(4px);
		}
		to {
			opacity: 1;
			transform: translateY(0) scale(1);
			filter: blur(0);
		}
	}
</style>
</file>

<file path="src/lib/components/layout/hero-sections/CustomerCardHero.svelte">
<!--
@component CustomerCardHero
This hero displays a row of customers. If used, we don't need a testimonial section on the same page.
It should ALWAYS have between 3 and 5 customers!
-->
<script lang="ts">
	// Components
	import AnimateText from "$lib/components/animation/AnimateText.svelte";
	import Button from "$lib/components/ui/Button.svelte";
	// Constants
	import { cta } from "$lib/navigation";
	import { onMount } from "svelte";
	import StakeholderCard from "../sub/StakeholderCard.svelte";
	import { animate, stagger } from "motion";
	let cards: HTMLElement[] = $state([]);
	// Types
	type Props = {
		centered?: boolean;
		title: string;
		subtitle: string;
		customers: Array<{
			name: string;
			position?: string;
			imageSrc: string;
		}>;
		callsToAction?: Array<{
			href: string;
			label: string;
		}>; // A maximum of two calls to action, with the first one being primary and the second one being secondary
	};
	let {
		title,
		subtitle,
		customers = [],
		callsToAction = [cta],
		centered = false
	}: Props = $props();
	onMount(() => {
		animate(
			cards,
			{
				// y: ["50%", 0],
				scale: [0.9, 1],
				filter: ["blur(4px)", "blur(0px)"],
				opacity: [0, 1]
			},
			{
				duration: 0.5,
				ease: "easeOut",
				delay: stagger(0.1, {
					startDelay: 0.5,
					ease: "easeInOut"
				})
			}
		);
	});
</script>
<div class="bg-background">
	<header
		class={[
			"section-px container mx-auto grid items-end gap-16 gap-y-9 text-balance",
			centered ? "place-items-center py-16 text-center" : "mb-12 pt-24 xl:grid-cols-[1fr_auto]"
		]}
		data-enter-container
	>
		<div class="grid max-w-prose gap-6">
			<h1 class="text-display w-full text-balance" data-enter>
				<span class="block"><AnimateText text={title} /></span>
			</h1>
			<p
				data-enter
				class={[
					"text-muted-foreground text-headline block  max-w-[45ch] text-pretty transition duration-500 ease-out",
					centered && "mx-auto"
					// isTitleComplete ? "opacity-100" : "translate-y-2 opacity-0 blur-sm"
				]}
			>
				{subtitle}
			</p>
		</div>
		{#if callsToAction.length > 0}
			<div class="flex gap-4" data-enter>
				{#each callsToAction as cta, index}
					<Button
						href={cta.href}
						size="lg"
						variant={index % 2 === 0 ? "primary" : "secondary"}
						class="max-lg:hidden">{cta.label}</Button
					>
					<Button
						href={cta.href}
						size="md"
						variant={index % 2 === 0 ? "primary" : "secondary"}
						class="lg:hidden">{cta.label}</Button
					>
				{/each}
			</div>
		{/if}
	</header>
	<div
		class="mt-4 grid flex-nowrap gap-(--card-gap) overflow-x-auto px-(--card-gap) whitespace-nowrap [--card-gap:calc(var(--radius)/2)] [--gap:--spacing(5)] max-lg:auto-cols-max max-lg:grid-flow-col md:whitespace-normal lg:grid-cols-5 lg:flex-wrap"
	>
		{#each customers as customer, index}
			<div class="h-full overflow-clip">
				<StakeholderCard bind:cards {...customer} {index} />
			</div>
		{/each}
	</div>
</div>
</file>

<file path="src/lib/components/layout/hero-sections/Hero.svelte">
<!--
    @component
    Bold hero banner with eye-catching text and strong call-to-action. NEVER use title case.
    Usage:
    ```html
    <Hero
      title="Bold Claim"
      subtitle="Quick Value"
      imageSrc="/hero.jpg"
      callsToAction={[
        {
          href: "/start",
          label: "Go"
        },
        {
          href: "/learn",
          label: "More"
        }
      ]}
    />
    ```
    Props:
    - `title`: Main headline (string)
    - `subtitle`: Supporting text (string)
    - `imageSrc`: Hero image URL (string)
    - `callsToAction`: CTA buttons array (max two: primary, secondary)
-->
<script lang="ts">
	// Components
	import AnimateText from "$lib/components/animation/AnimateText.svelte";
	import Button from "$lib/components/ui/Button.svelte";
	// Constants
	import { cta } from "$lib/navigation";
	function handleImageError(e: Event) {
		const target = e.currentTarget as HTMLImageElement;
		target.src = "https://placehold.co/800x600/f8fafc/64748b?text=Hero+image";
	}
	// Types
	type Props = {
		centered?: boolean;
		title: string;
		subtitle: string;
		imageSrc?: string;
		callsToAction?: Array<{
			href: string;
			label: string;
		}>; // A maximum of two calls to action, with the first one being primary and the second one being secondary
	};
	let { title, subtitle, imageSrc, callsToAction = [cta], centered = false }: Props = $props();
</script>
<div class="bg-background">
	<header
		class={[
			"section-px container mx-auto grid items-end gap-16 gap-y-9 py-12 pt-24 text-balance",
			centered ? "place-items-center text-center" : " xl:grid-cols-[1fr_auto]"
		]}
		data-enter-container
	>
		<div class="grid gap-6" class:max-w-prose={centered}>
			<h1 class="text-display w-full" data-enter>
				<span class="block"><AnimateText text={title} /></span>
				{#if !centered}
					<span class="text-emphasis-dim block"><AnimateText text={subtitle} /></span>
				{/if}
			</h1>
			{#if centered}
				<p
					data-enter
					class={[
						"text-muted-foreground text-headline mx-auto block max-w-[45ch] transition duration-500 ease-out"
						// isTitleComplete ? "opacity-100" : "translate-y-2 opacity-0 blur-sm"
					]}
				>
					{subtitle}
				</p>
			{/if}
		</div>
		{#if callsToAction.length > 0}
			<div class="flex gap-4" data-enter>
				{#each callsToAction as cta, index}
					<Button
						href={cta.href}
						size="lg"
						variant={index % 2 === 0 ? "primary" : "secondary"}
						class="max-lg:hidden">{cta.label}</Button
					>
					<Button
						href={cta.href}
						size="md"
						variant={index % 2 === 0 ? "primary" : "secondary"}
						class="lg:hidden">{cta.label}</Button
					>
				{/each}
			</div>
		{/if}
	</header>
	{#if imageSrc}
		<div class="col-span-full aspect-video" data-enter>
			<img
				src={imageSrc}
				alt="Customer"
				class="size-full object-cover"
				onerror={handleImageError}
			/>
		</div>
	{/if}
</div>
</file>

<file path="src/lib/components/layout/hero-sections/SecondaryHero.svelte">
<script lang="ts">
	import SectionHeader from "$lib/components/layout/SectionHeader.svelte";
	let {
		title,
		subtitle,
		imageSrc = "https://source.unsplash.com/random/?people"
	}: {
		title: string;
		subtitle: string;
		imageSrc: string;
	} = $props();
</script>
<header class="border-b border-gray-100 dark:border-gray-900">
	<div class="text-title3 section-px section-py container mx-auto grid gap-16 gap-y-0">
		<SectionHeader {title} {subtitle} size="lg" />
		<div class="aspect-video overflow-clip rounded-xl bg-gray-100">
			<img
				class="h-full w-full object-cover"
				src={imageSrc}
				alt="Diverse group of people collaborating"
			/>
		</div>
	</div>
</header>
</file>

<file path="src/lib/components/layout/sub/__DesktopNav.svelte">
<script lang="ts">
	import Button from "$lib/components/ui/Button.svelte";
	// Types
	// Components
	import IconChevronDown from "~icons/lucide/chevron-down";
	// Utils
	import { cta, navigation } from "$lib/navigation";
	// Props
	const { items }: { items: typeof navigation } = $props();
	let activeItem = $state(-1);
	let dropdowns: HTMLElement[] = $state([]);
	let rects: DOMRect[] = $state([]);
	function selectItem(index: number) {
		activeItem = index;
	}
	let { width, height, x, y } = $derived.by(() => {
		if (activeItem !== -1 && dropdowns[activeItem]) {
			return dropdowns[activeItem].getBoundingClientRect();
		} else {
			return { width: 0, height: 0, x: 0, y: 0 };
		}
	});
	$inspect(rects[activeItem]);
</script>
<ul class="flex items-center justify-end gap-5">
	<div
		class="debug absolute inset-0 bg-red-500 transition-all duration-300"
		style:width="{width}px"
		style:height="{height}px"
		style:top="{y}px"
		style:left="{x}px"
	></div>
	{#each items as item, index}
		<li>
			<!-- svelte-ignore a11y_no_static_element_interactions -->
			<svelte:element
				this={item.children ? "button" : "a"}
				class="relative flex items-center gap-1"
				aria-label={item.label}
				onmouseover={() => selectItem(index)}
				onfocus={() => selectItem(index)}
			>
				<span>
					{item.label}
				</span>
				{#if item.children}
					<IconChevronDown class="text-muted-foreground" />
					<div class="absolute top-0 left-1/2 min-w-40 -translate-x-1/2 pt-8">
						<div
							bind:this={dropdowns[index]}
							class={[
								"debug bg-white",
								"rounded-(--outer-radius) [--outer-radius:var(--radius)]",
								"p-(--gap) [--gap:--spacing(1))]",
								"[--inner-radius:calc(var(--outer-radius)-var(--gap))]"
							]}
						>
							{#each item.children as child}
								<div class="debug flex items-center gap-1 rounded-(--inner-radius) px-3 py-2">
									<span>
										{child.label}
									</span>
								</div>
							{/each}
						</div>
					</div>
				{/if}
			</svelte:element>
		</li>
	{/each}
	<Button size="sm" variant="secondary" href={cta.href} class="ml-1">{cta.label}</Button>
</ul>
</file>

<file path="src/lib/components/layout/sub/_DesktopNavDropdown.svelte">
<script lang="ts">
	// Components
	import { NavigationMenu } from "bits-ui";
	import IconChevronDown from "~icons/lucide/chevron-down";
	// Props
	const { item } = $props();
	// State
	let activeImageIndex = $state(0);
	let hasImages = $derived(item.children.some((child) => child.image));
	function setActiveImageIndex(index: number) {
		activeImageIndex = index;
	}
</script>
<NavigationMenu.Trigger class="group/item inline-flex h-full items-center gap-1">
	{item.label}
	<IconChevronDown
		class="relative top-[1px] size-3 opacity-80 transition duration-200 ease-out group-hover/item:opacity-100 group-data-[state=open]:rotate-180 "
		aria-hidden="true"
	/>
</NavigationMenu.Trigger>
<NavigationMenu.Content
	class="data-[motion=from-end]:animate-enter-from-right data-[motion=from-start]:animate-enter-from-left data-[motion=to-end]:animate-exit-to-right data-[motion=to-start]:animate-exit-to-left absolute top-0 left-0 w-full data-[state=closed]:hidden sm:w-auto"
	forceMount
>
	<div
		class={[
			"grid gap-(--gap) p-(--gap)"
			// hasImages && "aspect-[2/1] min-w-[500px] grid-cols-2 items-start"
		]}
	>
		<!-- {#if hasImages}
			<div class="grid">
				{#each item.children as child, index}
					<img
						src={child.image}
						alt=""
						class="grid-center aspect-square h-full max-w-full object-cover transition duration-300 ease-out"
						class:opacity-100={index === activeImageIndex}
						class:opacity-0={index !== activeImageIndex}
					/>
				{/each}
			</div>
		{/if} -->
		<ul class="grid w-full list-none content-start items-start">
			{#each item.children as child, index}
				<li
					class="w-full"
					onmouseover={() => setActiveImageIndex(index)}
					onfocus={() => setActiveImageIndex(index)}
				>
					<NavigationMenu.Link
						href={child.href}
						class="link hover:bg-muted  min-w-40 rounded-(--inner-radius) px-3.5 py-3 leading-none no-underline outline-hidden transition-colors select-none"
					>
						{child.label}
					</NavigationMenu.Link>
				</li>
			{/each}
		</ul>
	</div>
</NavigationMenu.Content>
</file>

<file path="src/lib/components/layout/sub/StakeholderCard.svelte">
<script lang="ts">
	import Button from "$lib/components/ui/Button.svelte";
	const {
		name = "",
		position = "",
		imageSrc = "",
		type = "team",
		stakeholderType = "team",
		index = 0,
		cards = $bindable([])
	}: {
		name?: string;
		position?: string;
		imageSrc?: string;
		type?: "team" | "join";
		stakeholderType?: "team" | "investor";
		index?: number;
		cards?: HTMLElement[];
	} = $props();
</script>
<div
	bind:this={cards[index]}
	class={[
		"card bg-gray-50 dark:bg-gray-900",
		"h-full",
		"relative isolate grid aspect-[4/5] content-end items-end gap-10 overflow-hidden rounded-(--radius) p-(--gap) [--inner-radius:calc(var(--radius)-var(--gap))] ",
		type === "join" ? "bg-primary" : ""
	]}
>
	{#if type !== "join" && imageSrc}
		<img
			src={imageSrc}
			alt={name}
			loading="lazy"
			class="absolute inset-0 z-0 h-full w-full object-cover"
		/>
	{/if}
	{#if type === "team" && stakeholderType === "team"}
		<div
			class="absolute top-0 right-0 bottom-0 left-0 z-1 bg-gradient-to-b from-black/0 via-black/0 to-black/30"
		>
			<div class="linear-blur-down absolute right-0 bottom-0 left-0 h-[25%]"></div>
		</div>
	{/if}
	<div
		class={[
			"text-caption z-10",
			stakeholderType !== "team" ? "text-gray-700 dark:text-gray-50" : "text-white"
		]}
	>
		<div class={type === "join" ? "grid grid-cols-2 items-center" : ""}>
			<div>
				<div>{name}</div>
				<div class="opacity-70">{position}</div>
			</div>
			{#if type === "join"}
				<div class="justify-self-end">
					<Button href="/careers" variant="secondary" size="sm">Join us</Button>
				</div>
			{/if}
		</div>
	</div>
</div>
</file>

<file path="src/lib/components/layout/Features.svelte">
<script lang="ts">
	import Card from "../ui/Card.svelte";
	// Types
	type Feature = {
		title: string;
		description: string;
		link?: {
			href: string;
			label: string;
		};
	};
	// Components
	import SectionHeader from "./SectionHeader.svelte";
	// Props
	const {
		title,
		subtitle,
		features = []
	}: { title: string; subtitle: string; features: Feature[] } = $props();
	let featureCountClass = $derived(
		features.length <= 6 ? `feature-count-${features.length}` : "feature-count-many"
	);
</script>
<section class="[--gap:--spacing(2)]">
	<div class="section-px section-py container mx-auto grid">
		<SectionHeader {title} {subtitle} />
		<div class="bento-grid {featureCountClass}">
			{#each features as feature}
				<Card {...feature} />
			{/each}
		</div>
	</div>
</section>
<!--
@component
A feature grid section that displays a list of features with titles and descriptions.
Never use title case, always sentence case.
Make the feature descriptions one short sentence that clearly articulates the feature.
Usage:
```html
<FeatureSection
  title="Section Title"
  subtitle="Section Subtitle"
  features={[
    {
      title: "Feature Title",
      description: "Feature description text",
      link: { href: "/optional-link", label: "Learn more" } // optional
    }
    // more features...
  ]}
/>
```
-->
<style>
	/* Base styles for the bento grid */
	.bento-grid {
		display: grid;
		gap: var(--gap);
		border-radius: var(--radius);
	}
	/* Mobile layout - stack all cards */
	.bento-grid :global(article) {
		grid-area: auto;
	}
	/* Media query for medium screens and up */
	@media (min-width: 768px) {
		/* 1 Feature */
		.feature-count-1 {
			grid-template-columns: 1fr;
		}
		.feature-count-1 :global(article:nth-child(1)) {
			grid-column: 1 / -1;
		}
		/* 2 Features */
		.feature-count-2 {
			grid-template-columns: 1fr 1fr;
		}
		/* 3 Features */
		.feature-count-3 {
			grid-template-columns: 1fr 1fr;
			grid-template-rows: auto auto;
			grid-template-areas:
				"a b"
				"a c";
		}
		.feature-count-3 :global(article:nth-child(1)) {
			grid-area: a;
		}
		.feature-count-3 :global(article:nth-child(2)) {
			grid-area: b;
		}
		.feature-count-3 :global(article:nth-child(3)) {
			grid-area: c;
		}
		/* 4 Features */
		.feature-count-4 {
			grid-template-columns: 2fr 1fr 1fr;
			grid-template-rows: auto auto;
			grid-template-areas:
				"a c d"
				"b c d";
		}
		.feature-count-4 :global(article:nth-child(1)) {
			grid-area: a;
		}
		.feature-count-4 :global(article:nth-child(2)) {
			grid-area: b;
		}
		.feature-count-4 :global(article:nth-child(3)) {
			grid-area: c;
		}
		.feature-count-4 :global(article:nth-child(4)) {
			grid-area: d;
		}
		/* 5 Features */
		.feature-count-5 {
			grid-template-columns: 1fr 1fr 1fr;
			grid-template-rows: auto auto auto;
			grid-template-areas:
				"a b c"
				"d e c";
		}
		.feature-count-5 :global(article:nth-child(1)) {
			grid-area: a;
		}
		.feature-count-5 :global(article:nth-child(2)) {
			grid-area: b;
		}
		.feature-count-5 :global(article:nth-child(3)) {
			grid-area: c;
		}
		.feature-count-5 :global(article:nth-child(4)) {
			grid-area: d;
		}
		.feature-count-5 :global(article:nth-child(5)) {
			grid-area: e;
		}
		/* 6 Features */
		.feature-count-6 {
			grid-template-columns: 1fr 1fr 1fr;
		}
		/* More than 6 features */
		.feature-count-many {
			grid-template-columns: 1fr 1fr 1fr;
		}
	}
	/* For larger screens, refine the grid */
	@media (min-width: 1024px) {
		.feature-count-many {
			grid-template-columns: repeat(3, 1fr);
		}
	}
</style>
</file>

<file path="src/lib/components/layout/Footer.svelte">
<script lang="ts">
	// Types
	import type { HTMLAttributes } from "svelte/elements";
	import { navigation } from "$lib/navigation";
	// Components
	import { CONFIG } from "$lib/content";
	import Signature from "./Signature.svelte";
	// Props
	const props: HTMLAttributes<HTMLElement> = $props();
</script>
<footer
	class="inset-x-0 bottom-0 -z-10 grid overflow-hidden"
	aria-labelledby="footer-heading"
	{...props}
>
	<div
		class="section-px relative z-10 container mx-auto grid h-full content-between items-start gap-16 gap-x-32 pt-10 lg:grid-cols-2 lg:gap-32"
	>
		<!-- Navigation sections with editorial styling -->
		<div class="text-headline flex items-center gap-4">
			<!-- <Logo class="size-7" /> -->
			<div class="text-headline">
				{CONFIG.companyName}<sup class="ml-0.5 align-super text-[.25em] text-gray-800">TM</sup>
			</div>
		</div>
		<ul class="grid grid-cols-2 gap-8 gap-y-16 lg:grid-cols-3">
			{#each navigation
				.filter((item) => item.showInFooter !== false)
				.sort((a, b) => (b?.children?.length || 0) - (a?.children?.length || 0)) as section}
				<div
					class="inline-block text-gray-400 transition-all duration-300 ease-out dark:text-gray-700"
				>
					<h3 class="text-caption text-xs" class:hidden={!section?.children}>
						{section.label}
					</h3>
					{#if section.children}
						<ul class="mt-4 flex flex-col gap-1.5">
							{#each section.children.filter((child) => child.showInFooter !== false) as item}
								<li>
									<a href={item.href} class="" target={item?.target || undefined}>
										{item.label}
									</a>
								</li>
							{/each}
						</ul>
					{:else}
						<a href={section.href} class="" target={section?.target || undefined}>
							{section.label}
						</a>
					{/if}
				</div>
			{/each}
		</ul>
		<!-- Footer bottom section -->
		<div
			class="col-span-full border-t border-gray-100 py-6 text-gray-400 dark:border-gray-800 dark:text-gray-600"
		>
			<div class="grid grid-cols-2 items-start justify-between gap-4 gap-x-32 text-sm">
				<div>
					&copy; {CONFIG.companyName}
					{new Date().getFullYear()}
				</div>
				<div class="flex items-baseline justify-end gap-3 lg:justify-start">
					<div class="ml-auto hidden justify-self-end lg:block"><Signature /></div>
				</div>
			</div>
		</div>
	</div>
</footer>
<style lang="postcss">
	@reference '../../../app.css';
	a {
		@apply inline-block text-gray-700 underline decoration-transparent transition-all duration-300 ease-out hover:text-gray-500 dark:text-gray-300 dark:hover:text-white;
	}
</style>
</file>

<file path="src/lib/components/layout/LogoScroller.svelte">
<script lang="ts">
	// Components
	import Marquee from "./sub/Marquee.svelte";
	// Props
	const {
		paused,
		label = "Scaling companies like yours",
		layout = "vertical",
		mode = "light",
		logoUrls = [
			"https://cdn.brandfetch.io/facebook.com/w/400/h/400/logo?c=1id_elLz2Bd5Ej-dWo7",
			"https://cdn.brandfetch.io/amazon.com/w/400/h/400/logo?c=1id_elLz2Bd5Ej-dWo7",
			"https://cdn.brandfetch.io/google.com/w/400/h/400/logo?c=1id_elLz2Bd5Ej-dWo7",
			"https://cdn.brandfetch.io/apple.com/w/400/h/400/logo?c=1id_elLz2Bd5Ej-dWo7"
		]
	}: {
		paused?: boolean;
		label?: string;
		layout?: "horizontal" | "vertical";
		mode?: "light" | "dark";
		logoUrls?: string[];
	} = $props();
</script>
<div
	data-scroller
	class="grid place-items-center gap-4 self-end py-4 {label ? 'sm:py-12' : 'sm:py-8'}"
	class:!flex={layout === "horizontal"}
	class:dark={mode === "dark"}
>
	{#if label}
		<p
			class="body-sm text-emphasis-low whitespace-nowrap"
			class:mr-2={layout === "horizontal"}
			class:sm:mr-4={layout === "horizontal"}
		>
			{label}
		</p>
	{/if}
	<div class="m-auto w-full max-w-prose overflow-hidden">
		<Marquee
			class="mask-image h-full items-center text-gray-400 [--gap:theme(spacing.6)] sm:[--gap:theme(spacing.12)]"
			speed={paused ? 0 : 0.1}
		>
			{#each logoUrls as logo}
				<img
					src={logo}
					class="mx-8 h-5 w-fit object-contain opacity-70 saturate-0
					"
				/>
			{/each}
		</Marquee>
	</div>
</div>
<style lang="postcss">
	:global(.mask-image) {
		mask-image: linear-gradient(to right, transparent, black 15%, black 85%, transparent);
	}
</style>
</file>

<file path="src/lib/components/layout/StakeholderGrid.svelte">
<script lang="ts">
	import SectionHeader from "$lib/components/layout/SectionHeader.svelte";
	import Button from "$lib/components/ui/Button.svelte";
	import { animate, stagger } from "motion";
	import { onMount } from "svelte";
	// Types
	type TeamMember = {
		name: string;
		position?: string;
		bio?: string;
		image: string;
	};
	// Props
	const {
		title,
		stakeholderType = "team",
		subtitle,
		stakeholders
	}: {
		stakeholders: TeamMember[];
		title: string;
		subtitle: string;
		stakeholderType?: "team" | "investor";
	} = $props();
	let cards: HTMLElement[] = $state([]);
	onMount(() => {
		animate(
			cards,
			{
				y: ["1.5rem", 0],
				filter: ["blur(2px)", "blur(0px)"],
				opacity: [0, 1]
			},
			{
				duration: 0.3,
				ease: "easeOut",
				delay: stagger(0.1, {
					ease: "easeInOut"
				})
			}
		);
	});
</script>
<section class="">
	<div class="section-py section-px container mx-auto grid [--gap:--spacing(4)]">
		<SectionHeader {title} {subtitle} />
		<div
			class="grid grid-cols-1 gap-(--gap) {stakeholders.length === 1
				? 'md:grid-cols-3'
				: 'md:grid-cols-2 lg:grid-cols-4'}"
		>
			{#snippet card(
				{
					name,
					position,
					image,
					type = "team"
				}: {
					name: string;
					position?: string;
					image: string;
					type?: "team" | "join";
				},
				index: number
			)}
				<div
					bind:this={cards[index]}
					class={[
						"card bg-gray-50 opacity-0 dark:bg-gray-900",
						"bg-cover",
						"relative isolate grid aspect-[4/5] content-end items-end gap-10 overflow-hidden rounded-(--radius) bg-cover p-(--gap) [--inner-radius:calc(var(--radius)-var(--gap))] ",
						type === "join" ? "bg-primary" : ""
					]}
					style={type === "join"
						? ""
						: `background-image: url('${image}'); background-position: center; background-size: cover;`}
				>
					{#if type === "team" && stakeholderType === "team"}
						<div
							class="absolute top-0 right-0 bottom-0 left-0 bg-gradient-to-b from-black/0 via-black/0 to-black/30"
						>
							<div class="linear-blur-down absolute right-0 bottom-0 left-0 h-[25%]"></div>
						</div>
					{/if}
					<div
						class="text-caption z-10 {stakeholderType !== 'team'
							? 'text-gray-700 dark:text-gray-50'
							: 'text-white'}"
					>
						<div class={type === "join" ? "grid grid-cols-2 items-center" : ""}>
							<div>
								<div>{name}</div>
								<div class="opacity-70">{position}</div>
							</div>
							{#if type === "join"}
								<div class="justify-self-end">
									<Button href="/careers" variant="secondary" size="sm">Join us</Button>
								</div>
							{/if}
						</div>
					</div>
				</div>
			{/snippet}
			{#each stakeholders as member, index}
				{@render card(member, index)}
			{/each}
			{#if stakeholderType === "team"}
				{@render card(
					{
						name: "You?",
						position: "Join us",
						type: "join"
					},
					stakeholders.length
				)}
			{/if}
		</div>
	</div>
</section>
</file>

<file path="src/lib/components/layout/StyledHero.svelte">
<!--
    @component
    Styled hero banner with themed background colors and eye-catching text.
    Usage:
    ```html
    <StyledHero
      title="Bold Claim"
      subtitle="Quick Value"
      imageSrc="/hero.jpg"
      callsToAction={[
        {
          href: "/start",
          label: "Go"
        },
        {
          href: "/learn",
          label: "More"
        }
      ]}
    />
    ```
    Props:
    - `title`: Main headline (string)
    - `subtitle`: Supporting text (string)
    - `imageSrc`: Hero image URL (string)
    - `callsToAction`: CTA buttons array (max two: primary, secondary)
-->
<script lang="ts">
	// Components
	import AnimateText from "../animation/AnimateText.svelte";
	import Button from "$lib/components/ui/Button.svelte";
	// Constants
	import { cta } from "$lib/navigation";
	function handleImageError(e: Event) {
		const target = e.currentTarget as HTMLImageElement;
		target.src = "https://placehold.co/800x600/f8fafc/64748b?text=Hero+image";
	}
	// Types
	type Props = {
		title: string;
		subtitle: string;
		imageSrc?: string;
		callsToAction?: Array<{
			href: string;
			label: string;
		}>; // A maximum of two calls to action, with the first one being primary and the second one being secondary
	};
	let { title, subtitle, imageSrc, callsToAction = [cta] }: Props = $props();
</script>
<div class="w-full bg-[var(--color-bg-secondary)]">
	<header
		class="section-px container mx-auto grid items-end gap-16 gap-y-9 py-12 pt-24 text-balance xl:grid-cols-[1fr_auto]"
		data-enter-container
	>
		<h1 class="text-display w-full" data-enter>
			<span class="block"><AnimateText text={title} /></span>
			<span class="text-emphasis-dim block"><AnimateText text={subtitle} /></span>
		</h1>
		{#if callsToAction.length > 0}
			<div class="flex gap-4" data-enter>
				{#each callsToAction as cta, index}
					<Button
						href={cta.href}
						size="lg"
						variant={index % 2 === 0 ? "primary" : "secondary"}
						class="max-lg:hidden">{cta.label}</Button
					>
					<Button
						href={cta.href}
						size="md"
						variant={index % 2 === 0 ? "primary" : "secondary"}
						class="lg:hidden">{cta.label}</Button
					>
				{/each}
			</div>
		{/if}
	</header>
	{#if imageSrc}
		<div class="col-span-full aspect-video px-4 md:px-8 lg:px-10" data-enter>
			<img src={imageSrc} alt="Hero" class="size-full object-cover" onerror={handleImageError} />
		</div>
	{/if}
</div>
</file>

<file path="src/lib/components/layout/UseCases.svelte">
<script lang="ts">
	// Types
	type UseCase = {
		title: string;
		description: string;
		image: string;
		uniqeSellingPoints?: string[];
		link?: {
			href: string;
			label: string;
		};
	};
	// Components
	import Button from "$lib/components/ui/Button.svelte";
	// Props
	const {
		title,
		subtitle,
		useCases = []
	}: { title: string; subtitle: string; useCases: UseCase[] } = $props();
	let current = $state(0);
	import { onMount } from "svelte";
	import SectionHeader from "./SectionHeader.svelte";
	import { fade } from "svelte/transition";
	import { cubicInOut, cubicOut } from "svelte/easing";
	// Preload images lazily
	onMount(() => {
		if (useCases.length) {
			useCases.forEach((useCase, index) => {
				if (index !== current && useCase.image) {
					const img = new Image();
					img.loading = "lazy";
					img.src = useCase.image;
				}
			});
		}
	});
</script>
<section class="[--gap:--spacing(4)] [--inner-radius:calc(var(--radius)-var(--gap))]">
	<div class="section-px section-py container mx-auto grid">
		<SectionHeader {title} {subtitle} />
		<div class="grid gap-(--gap) rounded-(--radius) lg:grid-cols-[1fr_2fr]">
			<!-- Left column: Use cases list -->
			<div
				class="items-between bg-card border-border row-start-2 grid content-between gap-8 rounded-(--radius) border p-(--gap) lg:row-start-auto"
			>
				<div>
					{#each useCases as useCase, index}
						<div class="group">
							<button
								class="text-title3 hover:text-primary-600 hover:dark:text-primary-300 row-start-1 mb-2 w-full text-left transition-colors"
								class:text-primary-700={current === index}
								class:dark:text-primary-400={current === index}
								onpointerenter={() => (current = index)}
							>
								{useCase.title}
							</button>
						</div>
					{/each}
				</div>
				<article class="row-start-2">
					<p class="text-body text-gray-500">{useCases[current].description}</p>
					{#if useCases[current]?.link}
						<div class="mt-6">
							<Button href={useCases[current].link.href} variant="secondary">
								{useCases[current].link.label}
							</Button>
						</div>
					{/if}
				</article>
			</div>
			<!-- Right column: Featured image -->
			<div class="grid overflow-clip rounded-(--radius) bg-gray-50">
				{#key useCases[current]?.image}
					<img
						transition:fade={{ easing: cubicInOut, duration: 200 }}
						src={useCases[current].image}
						alt="Featured use case"
						loading="lazy"
						class="grid-center aspect-[3/2] size-full max-h-full object-cover"
					/>
				{/key}
			</div>
		</div>
	</div>
</section>
</file>

<file path="src/lib/state/nav.svelte.ts">
export const navHeight = $state({
	current: 50
});
</file>

<file path="src/lib/navigation.ts">
/**
 * DO NOT REMOVE THIS COMMENT
 * @remarks
 * Navigation Structure Example:
 *
 * **Product**
 * - Overview
 * - Solutions
 * - Use Cases
 * - Pricing
 * ---
 * **Resources**
 * - Blog
 * - Playbooks
 * - Customer stories
 * - Webinars
 * - Darwin Academy
 * - Documentation
 * - Marketplaces
 * - Community
 * ---
 * **Company**
 * - Careers
 * - About us
 * - News
 * - Legal
 * - Security
 * - Events
 * - Contact
 * - Social media
 */
// Types
export type NavItem = {
	label: string;
	href?: string;
	image?: string;
	showInNav?: boolean;
	showInFooter?: boolean;
	children?: (Omit<NavItem, "children" | "image"> & {
		image?: string;
		description?: string;
		showInNav?: boolean;
		showInFooter?: boolean;
	})[];
};
export const cta = {
	label: "Book demo",
	href: "/"
};
export const navigation: NavItem[] = [
	{
		label: "Pricing",
		href: "/pricing",
		showInNav: true,
		showInFooter: false
	},
	{
		label: "Use Cases",
		showInNav: true,
		showInFooter: true,
		children: [
			{
				label: "Healthcare",
				href: "/use-cases/healthcare",
				image:
					"https://images.unsplash.com/photo-1532938911079-1b06ac7ceec7?q=80&w=1920&auto=format&fit=crop",
				description: "Innovative solutions for patient care",
				showInNav: true,
				showInFooter: true
			},
			{
				label: "Finance",
				href: "/use-cases/finance",
				image:
					"https://images.unsplash.com/photo-1638913662180-afc4334cf422?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
				description: "Streamlining operations and compliance",
				showInNav: true,
				showInFooter: true
			},
			{
				label: "Technology",
				href: "/use-cases/technology",
				image:
					"https://images.unsplash.com/photo-1518770660439-4636190af475?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
				description: "Cutting-edge tools for tech companies",
				showInNav: true,
				showInFooter: true
			},
			{
				label: "Education",
				href: "/use-cases/education",
				image:
					"https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
				description: "Enhancing learning experiences",
				showInNav: true,
				showInFooter: true
			}
		]
	},
	{
		label: "Company",
		showInNav: true,
		showInFooter: true,
		children: [
			{
				label: "About us",
				href: "/about",
				showInNav: true,
				showInFooter: true
			},
			{
				label: "Pricing",
				href: "/pricing",
				showInNav: false,
				showInFooter: true
			},
			{
				label: "Careers",
				href: "/careers",
				showInNav: true,
				showInFooter: true
			}
		]
	},
	{
		label: "More",
		showInNav: false,
		showInFooter: true,
		children: [
			{
				label: "Privacy",
				href: "/legal/privacy",
				showInNav: false,
				showInFooter: true
			},
			{
				label: "Terms",
				href: "/legal/terms",
				showInNav: false,
				showInFooter: true
			}
			// Social media might be handled differently, not typically a nav item
		]
	}
];
// .sort((a, b) => (b.children?.length || 0) - (a.children?.length || 0));
</file>

<file path="src/routes/about/+page.svelte">
<script lang="ts">
	// Components
	import CallToAction from "$lib/components/layout/CallToAction.svelte";
	// Icons
	import StakeholderGrid from "$lib/components/layout/StakeholderGrid.svelte";
	import Story from "./Story.svelte";
	import SecondaryHero from "$lib/components/layout/hero-sections/SecondaryHero.svelte";
	import Culture from "$lib/components/layout/Culture.svelte";
	// Constants
	const values = [
		{
			title: "Innovation",
			description: "Constantly challenging the status quo to create better solutions."
		},
		{
			title: "Integrity",
			description: "Building trust through transparent actions and honest communication."
		},
		{
			title: "Impact",
			description: "Measuring our success by the positive change we create for our clients."
		}
	];
</script>
<SecondaryHero
	title="Solving world hunger"
	subtitle="one step at a time"
	imageSrc="https://source.unsplash.com/random/?people"
/>
<!-- Story Section -->
<Story
	paragraphs={[
		"We started in 2018 with a simple goal: make helpful tech that people actually need. While many chase profits, we chose to do things differently.",
		"Beyond making good products, we care about doing the right thing, being kind to our planet, and making sure everyone can use what we build. That's our compass.",
		"From day one, we've asked ourselves: 'Does this actually help people?' This question gets us through tough calls and shapes who we are. We're playing the long game here.",
		"We think about how our work affects real people's lives. We build tech that brings people together, keeps your information safe, and treats everyone fairly. When we stick to these basics, good things happen."
	]}
/>
<!-- Our Culture Section -->
<Culture {values} />
<!-- StakeholderGrid Section -->
<StakeholderGrid
	stakeholderType="team"
	title="Our team."
	subtitle="Your partners in innovation."
	stakeholders={[
		{
			name: "Alex Morgan",
			position: "Founder & CEO",
			bio: "Started the company with a vision to transform the industry through innovative solutions.",
			image:
				"https://images.unsplash.com/photo-1560250097-0b93528c311a?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=774&q=80"
		},
		{
			name: "Jamie Chen",
			position: "Chief Design Officer",
			bio: "Award-winning designer with a passion for creating intuitive and beautiful experiences.",
			image:
				"https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=776&q=80"
		},
		{
			name: "Taylor Wright",
			position: "Head of Engineering",
			bio: "Technology enthusiast focused on building scalable systems that make a difference.",
			image:
				"https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=774&q=80"
		}
	]}
/>
<StakeholderGrid
	stakeholderType="investor"
	title="Backed by the best."
	subtitle="Point Nine, TSIC and others"
	stakeholders={[
		{
			name: "Point Nine Capital",
			image: "/assets/logos/point-nine-capital-logo.svg"
		},
		{
			name: "TSIC Ventures",
			image: "/assets/logos/tsic-ventures-logo.svg"
		},
		{
			name: "Sequoia Capital",
			image: "/assets/logos/sequoia-capital-logo.svg"
		}
	]}
/>
<!-- CTA Section -->
<CallToAction
	title="Ready to collaborate?"
	subtitle="Let's create something amazing"
	description="Join the companies already leveraging our expertise to transform their digital presence and achieve their business goals."
/>
</file>

<file path="src/routes/careers/+page.svelte">
<script lang="ts">
	// Types
	// Components
	import SectionHeader from "$lib/components/layout/SectionHeader.svelte";
	import Culture from "$lib/components/layout/Culture.svelte";
	import Testimonials from "$lib/components/layout/Testimonials.svelte";
	import SecondaryHero from "$lib/components/layout/hero-sections/SecondaryHero.svelte";
	import Card from "$lib/components/ui/Card.svelte";
	import JobList, { type JobOpening } from "./JobList.svelte";
	// Icons
	import IconBriefcase from "~icons/lucide/briefcase";
	import IconUsers from "~icons/lucide/users";
	import IconHeart from "~icons/lucide/heart";
	import IconGlobe from "~icons/lucide/globe";
	// Constants
	const SECTION_BASE_CLASSES = "section-py section-px container mx-auto";
	const GRADIENT_BG_CLASSES =
		"bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800";
	const ICON_CONTAINER_CLASSES =
		"bg-primary-50 text-primary-600 dark:bg-primary-950 dark:text-primary-400 flex items-center justify-center rounded-full";
	const benefits = [
		{
			title: "Flexible Work",
			description: "Remote-first with flexible hours that respect work-life balance.",
			icon: IconBriefcase
		},
		{
			title: "Growth Opportunities",
			description: "Continuous learning with mentorship and education stipends.",
			icon: IconUsers
		},
		{
			title: "Comprehensive Benefits",
			description: "Health coverage, retirement plans, and generous paid time off.",
			icon: IconHeart
		}
	];
	const openings: JobOpening[] = [
		// Engineering
		{
			title: "Senior Frontend Developer",
			department: "Engineering",
			location: "Remote",
			type: "Full-time",
			url: "#"
		},
		{
			title: "Backend Engineer",
			department: "Engineering",
			location: "Remote",
			type: "Full-time",
			url: "#"
		},
		{
			title: "Design Engineer",
			department: "Engineering",
			location: "Remote",
			type: "Full-time",
			url: "#"
		},
		// Design
		{
			title: "UX/UI Designer",
			department: "Design",
			location: "Remote",
			type: "Full-time",
			url: "#"
		},
		{
			title: "Product Designer",
			department: "Design",
			location: "Remote",
			type: "Full-time",
			url: "#"
		},
		// Product
		{
			title: "Product Manager",
			department: "Product",
			location: "Remote",
			type: "Full-time",
			url: "#"
		},
		{
			title: "Product Analyst",
			department: "Product",
			location: "Remote",
			type: "Full-time",
			url: "#"
		},
		// Marketing
		{
			title: "Marketing Specialist",
			department: "Marketing",
			location: "Remote",
			type: "Full-time",
			url: "#"
		},
		{
			title: "Content Strategist",
			department: "Marketing",
			location: "Remote",
			type: "Full-time",
			url: "#"
		},
		{
			title: "Social Media Manager",
			department: "Marketing",
			location: "Remote",
			type: "Full-time",
			url: "#"
		}
	];
	const employeeTestimonials = [
		{
			name: "Michael Chen",
			position: "Senior Developer",
			company: "Engineering Team",
			quote:
				"Working here has given me the opportunity to tackle challenging problems while maintaining a healthy work-life balance. The team culture is supportive and collaborative.",
			image:
				"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80"
		},
		{
			name: "Priya Sharma",
			position: "Product Designer",
			company: "Design Team",
			quote:
				"The creative freedom and opportunity to influence product decisions makes this the best place I've ever worked. I'm constantly learning and growing.",
			image:
				"https://images.unsplash.com/photo-1534528741775-53994a69daeb?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80"
		},
		{
			name: "Marcus Johnson",
			position: "Marketing Lead",
			company: "Marketing Team",
			quote:
				"I joined three years ago and have grown tremendously. The leadership truly invests in your development and the work environment is both challenging and supportive.",
			image:
				"https://images.unsplash.com/photo-1531384441138-2736e62e0919?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80"
		}
	];
	const processSteps = [
		{
			step: 1,
			title: "Apply",
			description:
				"Submit your application through our careers portal with your resume and portfolio."
		},
		{
			step: 2,
			title: "Interview",
			description: "Meet with our team to discuss your experience, skills, and career aspirations."
		},
		{
			step: 3,
			title: "Welcome aboard",
			description: "Join our team and start your journey building the future with us."
		}
	];
	const values = [
		{
			icon: IconHeart,
			title: "Passion",
			description: "We're driven by a shared passion for innovation and excellence."
		},
		{
			icon: IconUsers,
			title: "Collaboration",
			description: "We believe in teamwork and collaboration to achieve great things."
		},
		{
			icon: IconGlobe,
			title: "Global Impact",
			description: "We're committed to making a positive impact on the world."
		}
	];
</script>
<!-- Hero Section -->
<SecondaryHero
	title="Join our team of innovators"
	subtitle="We're looking for passionate people to help us build the future of digital experiences. Discover your next opportunity with us."
/>
<!-- Why Join Us Section -->
<section class={SECTION_BASE_CLASSES}>
	<SectionHeader title="Why join us?" subtitle="Build your career while making an impact" />
	<div class="mt-16 grid gap-4 md:grid-cols-3">
		{#each benefits as benefit}
			<Card {...benefit} />
		{/each}
	</div>
</section>
<!-- Culture Section -->
<Culture {values} />
<Testimonials testimonials={employeeTestimonials} />
<!-- Application Process -->
<section class={SECTION_BASE_CLASSES}>
	<div class="mx-auto">
		<h2 class="text-title1 mb-16">Our application process</h2>
		<div class="grid gap-12 md:grid-cols-3">
			{#each processSteps as { step, title, description }, i}
				<div class="flex flex-col">
					<div class="{ICON_CONTAINER_CLASSES} mb-6 size-11">
						<span class="text-headline">{step}</span>
					</div>
					<h3 class="text-headline mb-3">{title}</h3>
					<p class="text-body text-emphasis-low">{description}</p>
				</div>
			{/each}
		</div>
	</div>
</section>
<!-- Current Openings Section -->
<section class={GRADIENT_BG_CLASSES}>
	<div class="section-px section-py container mx-auto grid w-full items-start lg:grid-cols-2">
		<SectionHeader title="Current openings" subtitle="Find your perfect role" />
		<JobList {openings} />
	</div>
</section>
</file>

<file path="src/routes/careers/JobList.svelte">
<script module lang="ts">
	export type JobOpening = {
		title: string;
		department: string;
		location: string;
		type: string;
		url: string;
	};
</script>
<script lang="ts">
	// Types
	// Components
	import IconArrowUpRight from "~icons/lucide/arrow-up-right";
	// Utils
	// Props
	const { openings }: { openings: JobOpening[] } = $props();
	let openingsByDepartment = $derived.by(() => {
		const departments = new Set(openings.map((opening) => opening.department));
		return Array.from(departments).map((department) => ({
			department,
			openings: openings.filter((opening) => opening.department === department)
		}));
	});
</script>
<div class="grid gap-8">
	{#each openingsByDepartment as { department, openings }}
		<div class="grid w-full gap-4">
			<div
				class="text-callout flex w-full items-baseline justify-between gap-8 border-b border-gray-200 pb-2.5 !font-normal text-gray-500 dark:border-gray-800 dark:text-gray-400"
			>
				<h3>{department}</h3>
				<p class="text-gray-400 dark:text-gray-500">
					{openings.length} open roles
				</p>
			</div>
			<ul class="">
				{#each openings as opening}
					<li
						class="group rounded bg-transparent transition duration-300 ease-out hover:bg-gray-200 hover:dark:bg-gray-900"
					>
						<a
							href={opening.url}
							class="flex items-baseline gap-3 py-3 [--offset:--spacing(4)] *:transition *:duration-200 *:ease-out"
						>
							<h4 class="text-headline group-hover:translate-x-[var(--offset)]">{opening.title}</h4>
							<p class="text-caption text-emphasis-low group-hover:translate-x-[var(--offset)]">
								{opening.location} &middot; {opening.type}
							</p>
							<div
								class="ml-auto grid size-6 h-full items-center self-stretch text-current opacity-20 group-hover:-translate-x-[var(--offset)] group-hover:opacity-50"
							>
								<IconArrowUpRight class="size-full" />
							</div>
						</a>
					</li>
				{/each}
			</ul>
		</div>
	{/each}
</div>
</file>

<file path="src/routes/test/+page.svelte">
<div class="h-screen"></div>
</file>

<file path="src/routes/use-cases/[usecase]/+page.svelte">
<script lang="ts">
	// Types
	import type { PageProps } from "./$types";
	// Components
	import Hero from "$lib/components/layout/hero-sections/Hero.svelte";
	import Summary from "$lib/components/layout/Summary.svelte";
	import Features from "$lib/components/layout/Features.svelte";
	import Testimonials from "$lib/components/layout/Testimonials.svelte";
	import CallToAction from "$lib/components/layout/CallToAction.svelte";
	// Props
	const { data }: PageProps = $props();
</script>
<Hero
	title={data.hero.title}
	subtitle={data.hero.subtitle}
	imageSrc={data.hero.imageSrc}
	callsToAction={data.hero.callsToAction}
/>
<Summary title={data.summary.title} text={data.summary.text} />
<Testimonials testimonials={data.testimonials} />
<Features
	title={data.features.title}
	subtitle={data.features.subtitle}
	features={data.features.items}
/>
<CallToAction
	title={data.cta.title}
	subtitle={data.cta.subtitle}
	description={data.cta.description}
	callsToAction={data.cta.callsToAction}
/>
</file>

<file path="src/routes/+error.svelte">
<script lang="ts">
	import { page } from "$app/state";
	import Button from "$lib/components/ui/Button.svelte";
</script>
<div class="flex min-h-screen flex-col items-center justify-center">
	<div class="mx-auto w-full max-w-md text-center">
		<h1 class="text-display mb-2 text-gray-800 dark:text-gray-100">Error {page.status}</h1>
		<p class="text-body mb-8 text-gray-600 dark:text-gray-300">
			{page.error?.message}
		</p>
		<Button href="/">Go back home</Button>
	</div>
</div>
</file>

<file path="src/routes/+layout.server.ts">
// Types
import { CONFIG } from "$lib/content";
import type { LayoutServerLoad } from "./$types";
export const load: LayoutServerLoad = async () => {
	return {
		meta: {
			title: CONFIG.companyName,
			description: CONFIG.description,
			image: CONFIG.image,
			url: CONFIG.url
		}
	};
};
</file>

<file path="src/app.css">
/* Do not modify this file, as it is generated. */
@import "tailwindcss";
@import "./base.css";
@import "./typography.css";
@import "./spacing.css";
@import "./theme.css";
@theme {
	/* Colors */
	--color-gray-50: oklch(0.985 0.001 106.423);
	--color-gray-100: oklch(0.97 0.001 106.424);
	--color-gray-200: oklch(0.923 0.003 48.717);
	--color-gray-300: oklch(0.869 0.005 56.366);
	--color-gray-400: oklch(0.709 0.01 56.259);
	--color-gray-500: oklch(0.553 0.013 58.071);
	--color-gray-600: oklch(0.444 0.011 73.639);
	--color-gray-700: oklch(0.374 0.01 67.558);
	--color-gray-800: oklch(0.268 0.007 34.298);
	--color-gray-900: oklch(0.216 0.006 56.043);
	--color-gray-950: oklch(0.147 0.004 49.25);
	--color-primary-50: oklch(0.982 0.018 155.826);
	--color-primary-100: oklch(0.962 0.044 156.743);
	--color-primary-200: oklch(0.925 0.084 155.995);
	--color-primary-300: oklch(0.871 0.15 154.449);
	--color-primary-400: oklch(0.792 0.209 151.711);
	--color-primary-500: oklch(0.723 0.219 149.579);
	--color-primary-600: oklch(0.627 0.194 149.214);
	--color-primary-700: oklch(0.527 0.154 150.069);
	--color-primary-800: oklch(0.448 0.119 151.328);
	--color-primary-900: oklch(0.393 0.095 152.535);
	--color-primary-950: oklch(0.266 0.065 152.934);
	--color-secondary-50: oklch(97% 0.015 30);
	--color-secondary-100: oklch(92% 0.02 30);
	--color-secondary-200: oklch(86% 0.03 30);
	--color-secondary-300: oklch(80% 0.04 30);
	--color-secondary-400: oklch(74% 0.05 30);
	--color-secondary-500: oklch(68% 0.06 30);
	--color-secondary-600: oklch(60% 0.07 30);
	--color-secondary-700: oklch(52% 0.08 30);
	--color-secondary-800: oklch(40% 0.09 30);
	--color-secondary-900: oklch(30% 0.1 30);
	--color-secondary-950: oklch(20% 0.11 30);
	--font-body: var(--font-family), var(--font-fallback);
	--font-display: var(--font-body);
}
</file>

<file path="package.json">
{
	"name": "unc-landing-page-template",
	"private": true,
	"version": "0.0.1",
	"type": "module",
	"scripts": {
		"dev": "vite dev",
		"build": "vite build",
		"preview": "vite preview",
		"prepare": "svelte-kit sync || echo ''",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
		"format": "prettier --write .",
		"lint": "prettier --check . && eslint ."
	},
	"devDependencies": {
		"@eslint/compat": "^1.2.8",
		"@eslint/js": "^9.24.0",
		"@floating-ui/dom": "^1.6.13",
		"@iconify-json/lucide": "^1.2.35",
		"@number-flow/svelte": "^0.3.7",
		"@sveltejs/adapter-auto": "^4.0.0",
		"@sveltejs/kit": "^2.20.5",
		"@sveltejs/vite-plugin-svelte": "^5.0.3",
		"@tailwindcss/vite": "^4.1.3",
		"bits-ui": "^1.3.19",
		"eslint": "^9.24.0",
		"eslint-config-prettier": "^10.1.2",
		"eslint-plugin-svelte": "^2.46.1",
		"globals": "^15.15.0",
		"motion": "^12.6.3",
		"prettier": "^3.5.3",
		"prettier-plugin-svelte": "^3.3.3",
		"prettier-plugin-tailwindcss": "^0.6.11",
		"svelte": "^5.25.10",
		"svelte-check": "^4.1.5",
		"tailwindcss": "^4.1.3",
		"typescript": "^5.8.3",
		"typescript-eslint": "^8.29.1",
		"unplugin-icons": "^22.1.0",
		"vite": "^6.2.6"
	}
}
</file>

<file path="README.md">
# Uncommon Website
</file>

<file path="src/lib/components/layout/hero-sections/CenteredTextOnlyHero.svelte">
<!--
@component CenteredTextOnlyHero
This component displays a centered text hero with call to action buttons.
Takes up the full viewport height and centers content vertically.
-->
<script lang="ts">
	// Components
	import AnimateText from "$lib/components/animation/AnimateText.svelte";
	import Button from "$lib/components/ui/Button.svelte";
	// Constants
	import { cta } from "$lib/navigation";
	// Types
	type Props = {
		title: string;
		subtitle: string;
		imageSrc: string;
		callsToAction?: Array<{
			href: string;
			label: string;
		}>; // A maximum of two calls to action, with the first one being primary and the second one being secondary
	};
	let { title, subtitle, callsToAction = [cta], imageSrc }: Props = $props();
</script>
<div
	class="bg-background relative isolate flex h-[calc(100vh-var(--nav-height))] items-center justify-center"
>
	<div
		style:background-image="url('{imageSrc}')"
		class="absolute top-0 right-4 bottom-4 left-4 -z-10 rounded-(--radius-xl) bg-cover after:absolute after:inset-0 after:rounded-(--radius-xl) after:shadow-[inset_0_0_100px_40px_rgba(0,0,0,0.3)]"
	></div>
	<header
		class="section-px container mx-auto grid place-items-center text-center text-balance"
		data-enter-container
	>
		<div class="grid max-w-prose gap-6">
			<h1 class="text-display w-full text-balance" data-enter>
				<span class="block"><AnimateText text={title} /></span>
			</h1>
			<p
				data-enter
				class="text-headline mx-auto block max-w-[45ch] text-pretty transition duration-500 ease-out"
			>
				{subtitle}
			</p>
		</div>
		{#if callsToAction.length > 0}
			<div class="mt-8 flex gap-4" data-enter>
				{#each callsToAction as cta, index}
					<Button href={cta.href} size="lg" variant="secondary" class="max-lg:hidden"
						>{cta.label}</Button
					>
					<Button
						href={cta.href}
						size="md"
						variant={index % 2 === 0 ? "secondary" : "ghost"}
						class="lg:hidden">{cta.label}</Button
					>
				{/each}
			</div>
		{/if}
	</header>
</div>
</file>

<file path="src/lib/components/layout/CallToAction.svelte">
<!--
    @component
    A call-to-action component that attracts attention and encourages user engagement.
    Usage:
    ```html
    <CallToAction
      title="Get started today"
      subtitle="Join now"
      description="Ready to experience the difference? Join our community of satisfied customers and see how our solution can transform your workflow."
      image="/path/to/image.jpg"
      callsToAction={[
        {
          href: "/get-started",
          label: "Get Started",
          variant: "primary"
        },
        {
          href: "/contact",
          label: "Talk to Sales",
          variant: "secondary"
        }
      ]}
    />
    ```
    Props:
    - `title`: The main heading text (string)
    - `subtitle`: Secondary heading text (string)
    - `description`: Detailed information about the offer (string)
    - `callsToAction`: Array of CTA objects with href, label, and optional variant properties (CTA[])
    - `imageSrc`: portrait of the company's customer smiling at the camera.
-->
<script lang="ts">
	// Types
	import type { ComponentProps } from "svelte";
	// Components
	import Button from "../ui/Button.svelte";
	import AnimateText from "../animation/AnimateText.svelte";
	import { cta } from "$lib/navigation";
	// Types
	type CTA = {
		href: string;
		label: string;
		variant?: ComponentProps<typeof Button>["variant"];
	};
	// Props
	const {
		title = "Get started today",
		subtitle = "Join now",
		description = "Ready to experience the difference? Join our community of satisfied customers and see how our solution can transform your workflow. ",
		imageSrc = "https://images.unsplash.com/photo-1573497019940-1c28c88b4f3e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",
		callsToAction = [cta]
	}: {
		title?: string;
		subtitle?: string;
		description?: string;
		imageSrc?: string;
		callsToAction?: CTA[];
	} = $props();
</script>
<div class="">
	<section class="section-px section-py container mx-auto">
		<div
			class="bg-card border-border grid content-start items-center justify-between gap-(--gap) rounded-(--radius) border p-(--gap) text-balance [--gap:--spacing(8)] [--inner-radius:calc(var(--radius)-var(--gap))] [--radius:var(--radius-xl)] lg:grid-cols-[2fr_1fr]"
		>
			<div class="items-between grid h-full content-between gap-16">
				<h2 class="text-title1 mb-3 flex flex-col">
					<span><AnimateText text={title} /></span>
					<span class="text-emphasis-low"><AnimateText text={subtitle} /></span>
				</h2>
				<div class="flex flex-col items-start justify-start gap-7">
					<p class="text-headline text-emphasis-low">
						{description}
					</p>
					<div class="flex flex-wrap gap-2">
						{#each callsToAction as cta}
							<Button class="w-full md:w-auto" href={cta.href} variant={cta.variant || "primary"}
								>{cta.label}</Button
							>
						{/each}
					</div>
				</div>
			</div>
			<img
				src={imageSrc}
				alt="Visual comparison showing product benefits"
				class="hidden aspect-[4/5] size-full max-h-full w-full rounded-[calc(max(var(--inner-radius),.25rem))] object-cover lg:block"
			/>
		</div>
	</section>
</div>
</file>

<file path="src/lib/components/layout/Testimonials.svelte">
<script lang="ts">
	// Types
	type Testimonial = {
		name: string;
		position: string;
		company: string;
		quote: string;
		image: string; // a 9/16 portrait image of a person
	};
	// Props
	let { testimonials }: { testimonials: Testimonial[] } = $props();
	// State
	let current = $state(0);
	let scrollProgress = $state(0);
	let wrapperRef: HTMLElement;
	let carouselRef: HTMLElement;
	let maxScrollDistance = $state(0);
	import { onMount } from "svelte";
	onMount(() => {
		// Preload images
		testimonials.forEach((testimonial) => {
			if (testimonial.image) {
				const img = new Image();
				img.loading = "lazy";
				img.src = testimonial.image;
			}
		});
		// Calculate the max scroll distance for translation
		const updateDimensions = () => {
			if (!carouselRef) return;
			// Get all cards and container measurements
			const cards = Array.from(carouselRef.querySelectorAll("article"));
			if (!cards.length) return;
			// Get the total width of all content including gaps
			const carouselWidth = carouselRef.scrollWidth;
			// Get the viewport width
			const viewportWidth = window.innerWidth;
			// Get the width of the last card
			const lastCard = cards[cards.length - 1];
			const lastCardWidth = lastCard.offsetWidth;
			// Get computed styles to account for gaps and padding
			const style = getComputedStyle(carouselRef);
			const gapStr = style.gap || style.columnGap || "0px";
			const gapValue = parseInt(gapStr, 10) || 0;
			// To ensure the last card is fully visible at the end of the scroll,
			// we need to make sure the last card's right edge aligns with the viewport's right edge
			// This means the maximum distance we need to translate is:
			// (total carousel width - viewport width)
			// If this value is negative or zero, no scrolling is needed
			maxScrollDistance = Math.max(0, carouselWidth - viewportWidth);
			// Ensure we can see the last card fully
			// This extra adjustment ensures the last card is properly positioned at the end of the scroll
			if (maxScrollDistance > 0) {
				// Add a larger buffer for more breathing room at the right edge
				// This accounts for any padding or margin that might affect positioning
				const buffer = 0; // 4rem buffer instead of 1rem
				maxScrollDistance += buffer;
			}
			if (maxScrollDistance <= 0) {
				console.info("Content fits in viewport, no scrolling needed");
			}
		};
		// Track vertical scroll position and convert to horizontal scroll
		let ticking = false;
		const handleScroll = () => {
			if (ticking) return;
			ticking = true;
			requestAnimationFrame(() => {
				if (!wrapperRef) return;
				const rect = wrapperRef.getBoundingClientRect();
				const sectionHeight = rect.height;
				const viewportHeight = window.innerHeight;
				// Calculate progress (0-1)
				let progress = 0;
				if (rect.top <= 0) {
					progress = Math.min(Math.abs(rect.top) / (sectionHeight - viewportHeight), 1);
				}
				scrollProgress = progress;
				current = Math.min(Math.floor(progress * testimonials.length), testimonials.length - 1);
				ticking = false;
			});
		};
		// Debounce resize handler for better performance
		let resizeTimer: number;
		const handleResize = () => {
			clearTimeout(resizeTimer);
			resizeTimer = setTimeout(() => {
				updateDimensions();
				handleScroll();
			}, 100);
		};
		// Initialize and set up listeners
		updateDimensions();
		window.addEventListener("resize", handleResize);
		window.addEventListener("scroll", handleScroll);
		setTimeout(() => {
			updateDimensions(); // Run once more after DOM is settled
			handleScroll();
		}, 100);
		return () => {
			window.removeEventListener("resize", handleResize);
			window.removeEventListener("scroll", handleScroll);
			clearTimeout(resizeTimer);
		};
	});
</script>
<section
	bind:this={wrapperRef}
	class="text-pretty [--gap:--spacing(4)]"
	style="height: calc(100vh * {testimonials.length});"
>
	<div
		class="section-py section-px sticky top-0 flex min-h-screen w-full items-center overflow-hidden"
	>
		<div
			bind:this={carouselRef}
			class={[
				"flex w-full gap-(--card-gap) pr-8 [--card-gap:--spacing(6)]",
				"[--inner-radius:calc(var(--outer-radius)-var(--gap))] [--outer-radius:var(--radius)] lg:[--outer-radius:var(--radius-xl)]"
			]}
		>
			{#each testimonials as testimonial}
				<article
					class={[
						"lg:container-xs lg:max-h-[60ch] lg:min-w-[50%] lg:grid-cols-[2fr_3fr]",
						"items-between grid grid-cols-1 gap-8",
						"bg-card dark:text-white",
						"aspect-video max-w-full min-w-full",
						"transform-gpu transition-transform duration-200 ease-[cubic-bezier(0.16,1,0.3,1)] will-change-transform",
						"rounded-(--outer-radius) p-(--gap)",
						"border-border border contain-layout"
					]}
					style:transform="translateX(calc(-{scrollProgress} * {maxScrollDistance}px))"
				>
					<div class="hidden overflow-clip rounded-[max(var(--inner-radius),2px)] lg:block">
						{#if testimonial.image}
							<img
								src={testimonial.image}
								alt="{testimonial.name} testimonial"
								loading="lazy"
								class="aspect-[3/4] h-full w-full object-cover"
							/>
						{/if}
					</div>
					<div class="flex flex-col justify-between gap-12">
						<q class="text-title2 max-w-prose dark:text-white">{testimonial.quote}</q>
						<cite class="text-caption flex items-center gap-3 not-italic">
							{#if testimonial.image}
								<img
									src={testimonial.image}
									alt="{testimonial.name} testimonial"
									loading="lazy"
									class="size-12 rounded-full object-cover lg:hidden"
								/>
							{/if}
							<div>
								<p class="text-callout">{testimonial.name}</p>
								<p class="text-muted-foreground">
									{testimonial.position}, {testimonial.company}
								</p>
							</div>
						</cite>
					</div>
				</article>
			{/each}
			<!-- Empty spacer to ensure last card has breathing room -->
			<div class="min-w-(--gap) lg:min-w-[calc(var(--gap)*3)]"></div>
		</div>
		<!-- Pagination Indicators -->
		<div class="absolute bottom-8 left-1/2 flex -translate-x-1/2 justify-center gap-2">
			{#each testimonials as _, index}
				<div
					class="focus:ring-primary-500 bg-emphasis-dim size-1.5 rounded-full transition-all duration-300 ease-in-out dark:bg-gray-700"
					class:opacity-50={current !== index}
					class:w-8={current === index}
					class:dark:bg-gray-400={current === index}
					aria-hidden="true"
				></div>
			{/each}
		</div>
	</div>
</section>
<style>
	/* Hide scrollbar while preserving functionality */
	.hide-scrollbar {
		-ms-overflow-style: none;
		scrollbar-width: none;
	}
	.hide-scrollbar::-webkit-scrollbar {
		display: none;
	}
</style>
</file>

<file path="src/lib/components/ui/Button.svelte">
<script lang="ts">
	// Types
	import type { Snippet } from "svelte";
	import type { ButtonRootProps } from "bits-ui";
	import { Button } from "bits-ui";
	type Variant = "primary" | "secondary" | "ghost";
	type Size = "sm" | "md" | "lg";
	type Props = ButtonRootProps & {
		variant?: Variant;
		size?: Size;
		children: Snippet;
		iconOnly?: boolean;
		hideLabel?: boolean;
		rounded?: boolean;
		prefix?: Snippet;
		suffix?: Snippet;
	};
	// Props
	const {
		variant = "primary",
		size = "md",
		children,
		class: classes = "",
		prefix: Prefix,
		suffix: Suffix,
		iconOnly = false,
		hideLabel = false,
		...rest
	}: Props = $props();
	// Styles
	const variants: Record<Variant, string> = {
		primary:
			"bg-primary-800 text-white hover:bg-primary-900 dark:bg-primary-700 dark:text-white dark:hover:bg-primary-800",
		secondary:
			"bg-white border border-gray-200 text-gray-900 hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:hover:bg-gray-700",
		ghost:
			"bg-transparent text-gray-900 hover:bg-gray-100 dark:text-gray-100 dark:hover:bg-gray-800"
	};
	const sizes: Record<Size, string> = $derived({
		sm: iconOnly ? "p-1.5 text-sm" : "px-4 py-1.5 rounded text-sm",
		md: iconOnly ? "p-2 text-base" : "px-4.5 py-2 rounded text-base",
		lg: iconOnly ? "p-2.5 text-lg" : "px-5 py-2 rounded-lg text-lg"
	});
	const baseStyles =
		"inline-flex items-center ring-1 ring-white/15 ring-inset justify-center !font-semibold transition ease-out duration-300 focus:outline-none focus:ring-0 active:brightness-[.9] active:scale-[.98] ring-0 focus-visible:ring-primary-500/20 dark:focus-visible:ring-primary-400/30 gap-3 [touch-action:manipulation]";
</script>
<Button.Root
	{...rest}
	class={[
		baseStyles,
		variants[variant],
		iconOnly && "aspect-square",
		sizes[size],
		"gap-2",
		classes
	]}
	data-theme-mode="auto"
>
	{#if Prefix}
		<Prefix />
	{/if}
	<span class:sr-only={hideLabel || iconOnly}>
		{@render children?.()}
	</span>
	{#if Suffix}
		<Suffix />
	{/if}
</Button.Root>
</file>

<file path="src/lib/components/ui/Card.svelte">
<script>
	let { title = "", description = "", class: customClass = "" } = $props();
</script>
<article
	class="bg-card hover:bg-sidebar-primary-foreground hover:text-primary-900 border-border grid content-between gap-16 rounded-(--radius) border p-4 px-5 text-pretty transition duration-300 ease-out lg:p-5 lg:px-6 {customClass}"
>
	<h3 class="text-title3 mb-2">
		{title}
	</h3>
	<p class="text-body max-w-prose opacity-60">{description}</p>
</article>
</file>

<file path="src/lib/content/index.ts">
export const CONFIG = {
	companyName: "Company",
	description: "Description",
	image: "/og.png",
	url: "https://example.com",
	fontFamily: "Inter Variable"
};
</file>

<file path="src/routes/+layout.svelte">
<script lang="ts">
	// Styles
	import "../app.css";
	// Components
	import Logo from "$lib/components/Logo.svelte";
	import Nav from "$lib/components/layout/Nav.svelte";
	import Footer from "$lib/components/layout/Footer.svelte";
	// Utils
	import { onMount } from "svelte";
	import { animate, inView, stagger } from "motion";
	import { MediaQuery } from "svelte/reactivity";
	import { browser } from "$app/environment";
	import { page } from "$app/state";
	import { CONFIG } from "$lib/content";
	import { navHeight } from "$lib/state/nav.svelte";
	const isTouchDevice = new MediaQuery("(pointer: coarse)");
	// Props
	let { data, children } = $props();
	onMount(() => {
		if (!browser) return;
		const enterContainers = document.querySelectorAll("[data-enter-container]");
		enterContainers?.forEach((container) => {
			const elements = container.querySelectorAll("[data-enter]");
			elements.forEach((element) => {
				(element as HTMLElement).style.opacity = "0";
			});
		});
		inView("[data-enter-container]", (e) => {
			animate(
				e.querySelectorAll("[data-enter]"),
				{
					opacity: [0, 1],
					y: ["2rem", 0]
				},
				{
					duration: 0.4,
					ease: "circOut",
					delay: stagger(0.15, {
						ease: "easeInOut"
					})
				}
			);
		});
	});
</script>
<svelte:head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<meta name="description" content={data.meta.description} />
	<meta name="author" content={data.meta.companyName} />
	<meta property="og:title" content={data.meta.title} />
	<meta property="og:description" content={data.meta.description} />
	<meta property="og:type" content="website" />
	<meta property="og:image" content={data.meta.image} />
	<meta property="og:url" content={data.meta.url} />
	<meta name="twitter:card" content="summary_large_image" />
	<meta name="twitter:title" content={data.meta.title} />
	<meta name="twitter:description" content={data.meta.description} />
	<meta name="twitter:image" content={data.meta.image} />
	<title>{data.meta.title}</title>
	<link rel="preconnect" href="https://fonts.googleapis.com" />
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="anonymous" />
	<!-- <link
		href="https://fonts.googleapis.com/css2?family={encodeURIComponent(
			page.data.meta.fontFamily
		)}:ital,wght@0,400..800;1,400..800&display=swap"
		rel="stylesheet"
	/> -->
	<link
		href="https://fonts.googleapis.com/css2?family={encodeURIComponent(
			CONFIG.fontFamily
		)}&display=swap"
		rel="stylesheet"
	/>
	<!-- eslint-disable -->
	{@html `
    	<style>
    	   :root {
    			--font-family: "${CONFIG.fontFamily}";
                --font-body: var(--font-family), var(--font-fallback);
    		}
    	</style>
	`}
</svelte:head>
<div
	style:--nav-height="{navHeight.current}px"
	class="isolate bg-inherit"
	class:touch={isTouchDevice.current === true}
	class:no-touch={isTouchDevice.current !== true}
>
	<Nav />
	{@render children()}
	<Footer />
</div>
</file>

<file path="src/lib/components/layout/sub/DesktopNav.svelte">
<script lang="ts">
	// Types
	// Components
	import Button from "$lib/components/ui/Button.svelte";
	// Utils
	import { cta, navigation } from "$lib/navigation";
	import { NavigationMenu } from "bits-ui";
	import DesktopNavDropdown from "./_DesktopNavDropdown.svelte";
	// Props
	const { items }: { items: typeof navigation } = $props();
	function handleValueChange(value: string) {
		console.log("Selected value:", value);
	}
</script>
<div
	class={[
		"relative flex items-center justify-end gap-5",
		"rounded-(--outer-radius) [--outer-radius:var(--radius)]",
		"[--gap:--spacing(1))]",
		"[--inner-radius:calc(var(--outer-radius)-var(--gap))]"
	]}
>
	<NavigationMenu.Root
		class="text-foreground relative z-10 flex justify-end"
		onValueChange={handleValueChange}
	>
		<NavigationMenu.List class="group flex list-none items-center justify-center gap-5 p-1">
			{#each items as item}
				<NavigationMenu.Item
					class="after:bg-muted relative after:absolute after:-inset-x-2.5 after:-inset-y-1.5 after:-z-10 after:rounded-(--radius) after:opacity-0 after:transition after:duration-300 after:ease-out hover:after:opacity-100"
				>
					{#if item.children}
						<DesktopNavDropdown {item} />
					{:else}
						<NavigationMenu.Link class="link" href={item.href}>
							{item.label}
						</NavigationMenu.Link>
					{/if}
				</NavigationMenu.Item>
			{/each}
			<NavigationMenu.Indicator
				class="data-[state=hidden]:animate-fade-out data-[state=visible]:animate-fade-in top-full z-10 flex h-2.5 items-end justify-center overflow-hidden opacity-100 transition-[all,transform_200ms_ease] duration-200 data-[state=hidden]:opacity-0"
			>
				<div class="bg-border relative top-[70%] size-2.5 rotate-[45deg] rounded-tl-[2px]"></div>
			</NavigationMenu.Indicator>
		</NavigationMenu.List>
		<div class="absolute top-full left-0 flex w-full justify-center perspective-[2000px]">
			<NavigationMenu.Viewport
				forceMount
				class="text-popover-foreground bg-background data-[state=closed]:animate-scale-out data-[state=open]:animate-scale-in border-border  relative mt-2.5 h-[var(--bits-navigation-menu-viewport-height)] w-full origin-[top_center] overflow-hidden rounded-(--outer-radius) border p-(--gap) shadow-lg transition-[width,_height] duration-200 data-[state=closed]:pointer-events-none data-[state=closed]:translate-y-4 data-[state=closed]:opacity-0 sm:w-[var(--bits-navigation-menu-viewport-width)]"
			/>
		</div>
	</NavigationMenu.Root>
	<Button size="sm" variant="secondary" href={cta.href} class="ml-1">{cta.label}</Button>
</div>
<style lang="postcss">
	@reference '../../../../app.css';
	:global(.link) {
		@apply hover:text-accent-foreground focus:bg-muted focus:text-accent-foreground inline-flex w-full items-center transition-colors focus:outline-hidden disabled:pointer-events-none disabled:opacity-50;
	}
	:global([data-navigation-menu-content]) {
		position: absolute;
		top: 0;
		left: 0;
		animation-duration: 200ms;
		animation-timing-function: ease;
	}
	:global([data-motion="from-start"]) {
		animation-name: enter-from-left;
	}
	:global([data-motion="from-end"]) {
		animation-name: enter-from-right;
	}
	:global([data-motion="to-start"]) {
		animation-name: exit-to-left;
	}
	:global([data-motion="to-end"]) {
		animation-name: exit-to-right;
	}
	:global([data-navigation-menu-viewport]) {
		position: relative;
		width: var(--bits-navigation-menu-viewport-width);
		height: var(--bits-navigation-menu-viewport-height);
		transition:
			width,
			height,
			200ms var(--ease-out);
	}
	@keyframes enter-from-right {
		from {
			opacity: 0;
			transform: translateX(200px);
		}
		to {
			opacity: 1;
			transform: translateX(0);
		}
	}
	@keyframes enter-from-left {
		from {
			opacity: 0;
			transform: translateX(-200px);
		}
		to {
			opacity: 1;
			transform: translateX(0);
		}
	}
	@keyframes exit-to-right {
		from {
			opacity: 1;
			transform: translateX(0);
		}
		to {
			opacity: 0;
			transform: translateX(200px);
		}
	}
	@keyframes exit-to-left {
		from {
			opacity: 1;
			transform: translateX(0);
		}
		to {
			opacity: 0;
			transform: translateX(-200px);
		}
	}
	@keyframes animate-fade-out {
		from {
			opacity: 1;
		}
		to {
			opacity: 0;
		}
	}
</style>
</file>

<file path="src/lib/components/layout/Pricing.svelte">
<!--
@component Pricing
Please update features according to the company's product offering. Do not remove this comment.
-->
<script lang="ts">
	// Types
	type PricingTier = {
		name: string;
		monthlyPrice?: number | null;
		yearlyPrice?: number | null;
		description: string;
		features: string[];
		cta: {
			label: string;
			href: string;
		};
		highlight?: boolean;
	};
	type PricingFeature = {
		name: string;
		tiers: {
			[key: string]: boolean | string;
		};
	};
	// Components
	import Button from "$lib/components/ui/Button.svelte";
	import SectionHeader from "./SectionHeader.svelte";
	import IconCheck from "~icons/lucide/check";
	import IconX from "~icons/lucide/x";
	import NumberFlow from "@number-flow/svelte";
	import LogoScroller from "./LogoScroller.svelte";
	// Props
	const {
		title = "Simple, transparent pricing",
		subtitle = "Choose the plan that works best for your needs",
		tierNames = ["Starter", "Pro", "Enterprise"],
		features = [
			{
				name: "Projects",
				tiers: {
					Starter: "5",
					Pro: "Unlimited",
					Enterprise: "Unlimited"
				}
			},
			{
				name: "Team members",
				tiers: {
					Starter: "1",
					Pro: "10",
					Enterprise: "Unlimited"
				}
			},
			{
				name: "Storage",
				tiers: {
					Starter: "1GB",
					Pro: "10GB",
					Enterprise: "Unlimited"
				}
			},
			{
				name: "API access",
				tiers: {
					Starter: false,
					Pro: true,
					Enterprise: true
				}
			},
			{
				name: "Custom domains",
				tiers: {
					Starter: false,
					Pro: true,
					Enterprise: true
				}
			},
			{
				name: "Analytics",
				tiers: {
					Starter: "Basic",
					Pro: "Advanced",
					Enterprise: "Advanced"
				}
			},
			{
				name: "Support response time",
				tiers: {
					Starter: "24 hours",
					Pro: "4 hours",
					Enterprise: "1 hour"
				}
			},
			{
				name: "Dedicated account manager",
				tiers: {
					Starter: false,
					Pro: false,
					Enterprise: true
				}
			},
			{
				name: "SLA",
				tiers: {
					Starter: false,
					Pro: false,
					Enterprise: "99.9%"
				}
			}
		],
		tiers = [
			{
				name: "Starter",
				monthlyPrice: 9.99,
				yearlyPrice: 7.99, // 20% savings
				description: "Perfect for individuals and small projects",
				features: [
					"Up to 5 projects",
					"Basic analytics",
					"24-hour support response time",
					"1GB storage"
				],
				cta: {
					label: "Get started",
					href: "/signup?plan=starter"
				}
			},
			{
				name: "Pro",
				monthlyPrice: 29.99,
				yearlyPrice: 23.99, // 20% savings
				description: "For growing teams and businesses",
				features: [
					"Unlimited projects",
					"Advanced analytics",
					"4-hour support response time",
					"10GB storage",
					"Custom domains",
					"Team collaboration tools"
				],
				cta: {
					label: "Get started",
					href: "/signup?plan=pro"
				},
				highlight: true
			},
			{
				name: "Enterprise",
				monthlyPrice: null,
				yearlyPrice: null,
				description: "For large organizations with specific needs",
				features: [
					"Everything in Pro",
					"Dedicated account manager",
					"1-hour support response time",
					"Unlimited storage",
					"Advanced security features",
					"Custom integrations",
					"99.9% uptime SLA"
				],
				cta: {
					label: "Contact sales",
					href: "/contact"
				}
			}
		]
	}: {
		title?: string;
		subtitle?: string;
		tiers?: PricingTier[];
		features?: PricingFeature[];
		tierNames?: string[];
		caption?: string;
	} = $props();
	// State
	let annual = $state(true);
</script>
<section class="section-py section-px container mx-auto">
	<div class="flex flex-col items-baseline justify-between lg:flex-row">
		<SectionHeader {title} {subtitle} />
		<div class="mb-8 flex justify-center">
			<div class="inline-flex items-center rounded-full bg-gray-100 p-0.5 dark:bg-gray-800">
				<Button
					variant="ghost"
					size="sm"
					class=" {!annual ? 'bg-white shadow-sm dark:bg-gray-700' : ''}"
					onclick={() => (annual = false)}
				>
					Monthly
				</Button>
				<Button
					variant="ghost"
					size="sm"
					rounded
					class={annual ? "bg-white shadow-sm dark:bg-gray-700" : ""}
					onclick={() => (annual = true)}
				>
					Annual <span class="text-primary-600 dark:text-primary-400 text-footnote">Save 20%</span>
				</Button>
			</div>
		</div>
	</div>
	<div class="bb grid gap-6 md:grid-cols-2 lg:grid-cols-3">
		{#each tiers as tier}
			<div
				class="flex flex-col rounded-xl bg-white p-6 ring ring-gray-200 transition-all duration-300 dark:bg-gray-800 dark:ring-gray-700"
				class:ring-2={tier.highlight}
				class:ring-primary={tier.highlight}
				class:dark:ring-primary-700={tier.highlight}
				class:translate-y-[-4px]={tier.highlight}
			>
				<div class="mb-8">
					<h3 class="text-title3 mb-4 dark:text-white">{tier.name}</h3>
					<div class="mt-2 flex items-baseline">
						{#if tier.monthlyPrice === null && tier.yearlyPrice === null}
							<span class="text-title2 dark:text-white">Custom</span>
						{:else}
							<NumberFlow
								class="text-title2 [&::part\(suffix\)]:text-caption dark:text-white"
								format={{
									style: "currency",
									currency: "USD",
									trailingZeroDisplay: "stripIfInteger"
								}}
								value={annual ? tier.yearlyPrice : tier.monthlyPrice}
								suffix="/month"
							/>
						{/if}
					</div>
					<p class="text-callout text-emphasis-medium mt-3 dark:text-gray-300">
						{tier.description}
					</p>
				</div>
				<div class="mb-8 flex-grow">
					<ul class="space-y-3">
						{#each tier.features as feature}
							<li class="flex items-center gap-2">
								<IconCheck class="text-primary-600 dark:text-primary-400 size-5 flex-shrink-0" />
								<span class="text-body text-emphasis-medium dark:text-gray-300">{feature}</span>
							</li>
						{/each}
					</ul>
				</div>
				<div class="mt-auto">
					<Button
						href={tier.cta.href}
						variant={tier.highlight ? "primary" : "secondary"}
						class="w-full"
					>
						{tier.cta.label}
					</Button>
				</div>
			</div>
		{/each}
	</div>
	<div class="mt-32">
		<!-- Responsive table wrapper with horizontal scroll on mobile -->
		<!-- <div class=" hidden overflow-x-auto px-4 sm:mx-0 sm:block sm:px-0">
			<table
				class="w-full min-w-full border-separate border-spacing-0 border-gray-200 text-left dark:border-gray-700"
			>
				<thead>
					<tr>
						<th
							class="sticky left-0 min-w-[120px] border-b border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-900"
						>
							<span class="sr-only">Feature</span>
						</th>
						{#each tierNames as tierName}
							<th
								class="text-headline min-w-[100px] border-b border-gray-200 p-4 text-start font-normal dark:border-gray-700"
							>
								{tierName}
							</th>
						{/each}
					</tr>
				</thead>
				<tbody>
					{#each features as feature}
						<tr>
							<td class="text-caption">
								{feature.name}
							</td>
							{#each tierNames as tierName}
								<td
									class="min-w-[100px] border-b border-gray-200 p-4 text-start text-gray-600 dark:border-gray-700 dark:text-gray-300"
								>
									{#if typeof feature.tiers[tierName] === "boolean"}
										{#if feature.tiers[tierName]}
											<IconCheck
												class="text-primary-600 dark:text-primary-400 mx-auto size-5 sm:mx-0"
											/>
										{:else}
											<IconX class="mx-auto size-5 text-gray-400 sm:mx-0" />
										{/if}
									{:else}
										{feature.tiers[tierName]}
									{/if}
								</td>
							{/each}
						</tr>
					{/each}
				</tbody>
			</table>
		</div> -->
		<!-- Mobile feature comparison (alternative view for very small screens) -->
		<div>
			<!-- Universal pricing comparison for mobile -->
			<div class="overflow-x-auto">
				<table class="w-full border-collapse">
					<!-- Sticky header with tier names -->
					<thead class="sticky top-0 z-10 border-b border-gray-200">
						<tr>
							<th class="min-w-[120px] py-3 text-left">
								<span class="sr-only">Feature</span>
							</th>
							{#each tierNames as tierName, i}
								<th class="text-caption min-w-[100px] py-3 text-left dark:text-white">
									{tierName}
								</th>
							{/each}
						</tr>
					</thead>
					<tbody class="divide-y divide-gray-200 dark:divide-gray-700">
						{#each features as feature}
							<tr>
								<td class="text-body py-3 pr-8 font-medium lg:pr-0 dark:text-white">
									{feature.name}
								</td>
								{#each tierNames as tierName, i}
									<td class="py-3">
										{#if typeof feature.tiers[tierName] === "boolean"}
											{#if feature.tiers[tierName]}
												<IconCheck class="text-primary-900 dark:text-primary-400 size-5" />
											{:else}
												<IconX class="size-5 text-gray-400" />
											{/if}
										{:else}
											<span class="text-callout font-medium text-gray-700 dark:text-gray-300">
												{feature.tiers[tierName]}
											</span>
										{/if}
									</td>
								{/each}
							</tr>
						{/each}
					</tbody>
				</table>
			</div>
		</div>
	</div>
	<LogoScroller />
</section>
<style lang="postcss">
	@reference '../../../app.css';
	:global(number-flow-svelte)::part(suffix) {
		@apply text-sm text-gray-400 dark:text-gray-500;
	}
</style>
</file>

<file path="src/routes/+page.svelte">
<script lang="ts">
	// Components
	import UseCases from "$lib/components/layout/UseCases.svelte";
	import Summary from "$lib/components/layout/Summary.svelte";
	import Features from "$lib/components/layout/Features.svelte";
	import Testimonials from "$lib/components/layout/Testimonials.svelte";
	import CallToAction from "$lib/components/layout/CallToAction.svelte";
	import AboutTeaser from "$lib/components/layout/AboutTeaser.svelte";
	import LogoScroller from "$lib/components/layout/LogoScroller.svelte";
	import CustomerCardHero from "$lib/components/layout/hero-sections/CustomerCardHero.svelte";
</script>
<CustomerCardHero
	title="Elevate your business with thoughtful design"
	subtitle="Solutions that enhance user experience, and improve visual communication."
	customers={[
		{
			name: "Jane Smith",
			position: "CTO at Tech Innovations",
			imageSrc:
				"https://images.unsplash.com/flagged/photo-1555475693-6e207bee0737?q=80&w=3687&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
		},
		{
			name: "Michael Johnson",
			position: "Director of Marketing at Global Solutions",
			imageSrc:
				"https://plus.unsplash.com/premium_photo-1671656349322-41de944d259b?q=80&w=3578&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
		},
		{
			name: "Sarah Williams",
			position: "Product Designer at Future Systems",
			imageSrc:
				"https://images.unsplash.com/photo-1632765854612-9b02b6ec2b15?q=80&w=2586&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
		},
		{
			name: "Robert Chen",
			position: "CEO at Apex Innovations",
			imageSrc:
				"https://plus.unsplash.com/premium_photo-1727942413448-2f06f240e743?q=80&w=3687&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
		},
		{
			name: "Emily Rodriguez",
			position: "Creative Director at Design Forward",
			imageSrc:
				"https://plus.unsplash.com/premium_photo-1708276242787-387acf1bbd4b?q=80&w=3735&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
		}
	]}
/>
<LogoScroller label="" />
<Summary
	title="What we do"
	text="Our technology delivers measurable results through secure, adaptable solutions that directly increase productivity and drive growth."
/>
<Testimonials
	testimonials={[
		{
			name: "Jane Smith",
			position: "CTO",
			company: "Tech Innovations",
			quote:
				"Their cutting-edge automation boosted our productivity by 35%.\nThe intuitive interface reduced training time and improved team adoption.",
			image:
				"https://images.unsplash.com/photo-1571513722275-4b41940f54b8?q=80&w=3687&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
		},
		{
			name: "John Doe",
			position: "Director of Operations",
			company: "Global Solutions",
			quote:
				"Their robust security protocols gave us confidence in handling sensitive data.\nThe 24/7 support team resolved issues within hours, not days.",
			image:
				"https://images.unsplash.com/photo-1600603405959-6d623e92445c?q=80&w=3687&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
		},
		{
			name: "Sarah Johnson",
			position: "Product Manager",
			company: "Future Systems",
			quote:
				"The scalable platform grew seamlessly with our business needs.\nTheir customization options allowed us to tailor solutions perfectly to our workflows.",
			image:
				"https://images.unsplash.com/photo-1531123897727-8f129e1688ce?q=80&w=3687&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
		}
	]}
/>
<Features
	title="Features"
	subtitle="Some features"
	features={[
		{
			title: "Streamlined Workflows",
			description:
				"Automate repetitive tasks and connect systems to improve productivity with our industry-leading 87% time savings."
		},
		{
			title: "Data Analysis",
			description:
				"Extract meaningful insights from your data with powerful analytical tools backed by proprietary AI algorithms that are 3x more accurate than competitors."
		},
		{
			title: "Secure Collaboration",
			description:
				"Work together seamlessly while maintaining strict data privacy standards with our zero-knowledge architecture and military-grade encryption."
		}
	]}
/>
<UseCases
	title="Use Cases"
	subtitle="Real-world applications for your business needs"
	useCases={[
		{
			title: "Streamlined Workflows",
			description:
				"Automate repetitive tasks and connect systems to improve productivity with our industry-leading 87% time savings.",
			image:
				"https://images.unsplash.com/photo-1552664730-d307ca884978?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2940&q=80",
			link: {
				href: "/use-cases/workflows",
				label: "Learn more"
			}
		},
		{
			title: "Data Analysis",
			description:
				"Extract meaningful insights from your data with powerful analytical tools backed by proprietary AI algorithms that are 3x more accurate than competitors.",
			image:
				"https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2488&q=80",
			link: {
				href: "/use-cases/data-analysis",
				label: "Explore analytics"
			}
		},
		{
			title: "Secure Collaboration",
			description:
				"Work together seamlessly while maintaining strict data privacy standards with our zero-knowledge architecture and military-grade encryption.",
			image:
				"https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2940&q=80",
			link: {
				href: "/use-cases/collaboration",
				label: "See security features"
			}
		}
	]}
/>
<AboutTeaser />
<CallToAction />
</file>

<file path="src/theme.css">
@theme inline {
	/* Theming */
	--color-background: var(--color-white);
	--color-foreground: var(--color-gray-950);
	--color-card: var(--color-gray-50);
	--color-card-foreground: var(--color-gray-950);
	--color-card-hover: var(--color-gray-100);
	--color-popover: var(--color-white);
	--color-popover-foreground: var(--color-gray-950);
	--color-primary: var(--color-primary-600);
	--color-primary-foreground: var(--color-primary-50);
	--color-secondary: var(--color-secondary-100);
	--color-secondary-foreground: var(--color-secondary-900);
	--color-muted: var(--color-gray-100);
	--color-muted-foreground: var(--color-gray-500);
	--color-accent: var(--color-gray-100);
	--color-accent-foreground: var(--color-gray-900);
	--color-destructive: color-mix(in oklch, var(--color-primary-500), var(--color-secondary-500));
	--color-border: var(--color-gray-50);
	--color-input: var(--color-gray-100);
	--color-ring: var(--color-primary-600);
	--color-chart-1: color-mix(in oklch, var(--color-primary-600), var(--color-secondary-500));
	--color-chart-2: color-mix(in oklch, var(--color-primary-500), var(--color-secondary-600));
	--color-chart-3: color-mix(in oklch, var(--color-primary-400), var(--color-secondary-400));
	--color-chart-4: color-mix(in oklch, var(--color-primary-700), var(--color-secondary-300));
	--color-chart-5: color-mix(in oklch, var(--color-primary-600), var(--color-secondary-400));
	--color-sidebar: var(--color-gray-50);
	--color-sidebar-foreground: var(--color-gray-950);
	--color-sidebar-primary: var(--color-primary-600);
	--color-sidebar-primary-foreground: var(--color-primary-50);
	--color-sidebar-accent: var(--color-gray-100);
	--color-sidebar-accent-foreground: var(--color-gray-900);
	--color-sidebar-border: var(--color-gray-200);
	--color-sidebar-ring: var(--color-primary-600);
	/* ALWAYS use REMs */
	--radius: 0.5rem !important;
	--radius-xs: calc(var(--radius) / 4);
	--radius-sm: calc(var(--radius) / 2);
	--radius-md: calc(var(--radius) / 1.5);
	--radius-lg: calc(var(--radius) * 1.5);
	--radius-xl: calc(var(--radius) * 2);
	--radius-2xl: calc(var(--radius) * 3);
	--radius-3xl: calc(var(--radius) * 4);
	--radius-4xl: calc(var(--radius) * 5);
}
&:where([data-theme="dark"], [data-theme="dark"] *) {
	--color-background: color-mix(in oklch, var(--color-gray-950), var(--color-gray-900));
	--color-foreground: var(--color-gray-50);
	--color-card: var(--color-gray-900);
	--color-card-foreground: var(--color-gray-50);
	--color-card-hover: var(--color-gray-800);
	--color-popover: var(--color-gray-900);
	--color-popover-foreground: var(--color-gray-50);
	--color-primary: var(--color-primary-600);
	--color-primary-foreground: var(--color-primary-50);
	--color-secondary: color-mix(in oklch, var(--color-gray-800), var(--color-gray-900));
	--color-secondary-foreground: var(--color-gray-50);
	--color-muted: color-mix(in oklch, var(--color-gray-800), var(--color-gray-900));
	--color-muted-foreground: var(--color-gray-400);
	--color-accent: color-mix(in oklch, var(--color-gray-800), var(--color-gray-900));
	--color-accent-foreground: var(--color-gray-50);
	--color-destructive: color-mix(in oklch, var(--color-primary-500), var(--color-primary-600));
	--color-border: color-mix(in oklch, var(--color-gray-50), transparent 90%);
	--color-input: color-mix(in oklch, var(--color-gray-50), transparent 85%);
	--color-ring: var(--color-primary-600);
	--color-chart-1: color-mix(in oklch, var(--color-primary-700), var(--color-secondary-600));
	--color-chart-2: color-mix(in oklch, var(--color-primary-400), var(--color-secondary-500));
	--color-chart-3: var(--color-primary-500);
	--color-chart-4: color-mix(in oklch, var(--color-primary-600), var(--color-secondary-700));
	--color-chart-5: color-mix(in oklch, var(--color-primary-600), var(--color-secondary-300));
	--color-sidebar: var(--color-gray-900);
	--color-sidebar-foreground: var(--color-gray-50);
	--color-sidebar-primary: var(--color-primary-600);
	--color-sidebar-primary-foreground: var(--color-primary-50);
	--color-sidebar-accent: color-mix(in oklch, var(--color-gray-800), var(--color-gray-900));
	--color-sidebar-accent-foreground: var(--color-gray-50);
	--color-sidebar-border: color-mix(in oklch, var(--color-gray-50), transparent 90%);
	--color-sidebar-ring: var(--color-primary-600);
}
</file>

<file path="src/typography.css">
/* Do not modify this file, as it is generated. */
@layer utilities {
	/* Typography Scale */
	.text-display {
		@apply text-[2.025rem] leading-[1.1] font-normal lg:text-[3.25rem];
		letter-spacing: -0.0055em;
	}
	.text-title1 {
		@apply text-[1.6875rem] leading-[1.25] lg:text-[2.025rem];
		letter-spacing: -0.0015em;
	}
	.text-title2 {
		@apply text-[1.35rem] leading-[1.2] lg:text-[1.6875rem];
		letter-spacing: -0.0015em;
	}
	.text-title3 {
		@apply text-[1.125rem] leading-[1.25] lg:text-[1.35rem];
		letter-spacing: -0.0015em;
	}
	.text-headline {
		@apply text-[1.0125rem] leading-[1.3] lg:text-[1.125rem];
		letter-spacing: -0.0015em;
	}
	.text-display,
	.text-title1,
	.text-title2,
	.text-title3,
	.text-headline {
		@apply font-[450];
		letter-spacing: -0.015em !important;
	}
	.text-body {
		@apply text-base leading-[1.5] font-normal tracking-normal;
	}
	.text-callout {
		@apply text-base leading-[1.6] tracking-normal lg:text-base;
	}
	.text-caption {
		@apply text-sm leading-[1.5] font-normal tracking-normal;
	}
	.text-footnote {
		@apply text-xs leading-[1.5] font-normal tracking-normal text-black/65;
	}
}
</file>

<file path="src/lib/components/layout/sub/MobileNav.svelte">
<script lang="ts">
	// Types
	import type { NavItem } from "$lib/navigation";
	// Components
	import Button from "$lib/components/ui/Button.svelte";
	import IconMenu from "~icons/lucide/menu";
	import IconChevronRight from "~icons/lucide/chevron-right";
	// Utils
	import { cta, navigation } from "$lib/navigation";
	import { beforeNavigate } from "$app/navigation";
	// Props
	const { items = [] }: { items: typeof navigation } = $props();
	// State
	let isMenuOpen = $state(false);
	let scrollBarWidth: number = $state(0);
	let themeColor: string = $state("");
	let originalThemeColor: string | null = $state(null);
	$effect(() => {
		scrollBarWidth = window.innerWidth - document.documentElement.clientWidth;
	});
	$effect(() => {
		const metaThemeColor = document.querySelector('meta[name="theme-color"]');
		originalThemeColor = metaThemeColor?.getAttribute("content");
	});
	$effect(() => {
		try {
			// Handle body scroll locking when menu is open
			if (isMenuOpen) {
				// Get accurate scrollbar width - recalculate to handle viewport changes
				scrollBarWidth = Math.max(0, window.innerWidth - document.documentElement.clientWidth);
				// Lock body scroll with padding to prevent layout shift
				if (document.body) {
					document.body.style.overflow = "hidden";
					document.body.style.paddingRight = `${scrollBarWidth}px`;
				}
				// Get computed background style for theme-color meta tag
				const navElement = document.getElementById("nav") || document.querySelector("#nav");
				if (navElement) {
					// Use computed style for accurate color
					const computedStyle = window.getComputedStyle(navElement);
					themeColor = computedStyle.backgroundColor || computedStyle.background;
				} else {
					// Fallback with theme-aware default
					themeColor = document.documentElement.classList.contains("dark")
						? "hsl(var(--background))" // dark mode fallback using CSS variable
						: "hsl(var(--background))"; // light mode fallback using CSS variable
				}
			} else {
				// Restore normal scrolling
				if (document.body) {
					document.body.style.overflow = "";
					document.body.style.paddingRight = "";
				}
				// Restore original theme color
				themeColor = originalThemeColor || "";
			}
		} catch (_) {
			// Ensure body scroll is restored in case of error
			if (document.body) {
				document.body.style.overflow = "";
				document.body.style.paddingRight = "";
			}
		}
	});
	beforeNavigate(() => {
		if (isMenuOpen) {
			isMenuOpen = false;
		}
	});
</script>
<svelte:window
	onkeydown={(e) => {
		if (e.key === "Escape" && isMenuOpen) {
			isMenuOpen = false;
		}
	}}
/>
<svelte:head>
	{#if themeColor}
		<meta name="theme-color" content={themeColor} />
	{/if}
</svelte:head>
<!-- Mobile Nav Menu -->
<div
	id="nav"
	class={[
		"items-between group/nav-list bg-background fixed inset-0 -z-10 m-0 grid h-[100dvh] content-between overflow-y-auto pt-32 transition duration-500 ease-out lg:hidden",
		"pointer-events-none translate-y-[-100%] data-[show]:pointer-events-auto data-[show]:translate-y-0"
	]}
	data-show={isMenuOpen || null}
>
	<ul class="nav-list container mx-auto divide-y *:border-gray-200">
		{#each items as item, index}
			{@render linkOrGroup(item, index)}
		{/each}
	</ul>
	<div class="section-px section-pb container mx-auto w-full">
		<Button size="lg" variant="primary" class="z-0 w-full md:w-auto" href={cta.href}
			>{cta.label}</Button
		>
	</div>
</div>
<div class="flex items-center justify-end gap-2">
	<Button size="sm" variant="secondary" href={cta.href}>{cta.label}</Button>
	<Button
		aria-label="Toggle nav"
		size="lg"
		variant="ghost"
		hideLabel
		suffix={IconMenu}
		iconOnly
		class="z-50 max-h-full"
		onclick={() => (isMenuOpen = !isMenuOpen)}>Menu</Button
	>
</div>
{#snippet linkOrGroup(item: NavItem, index: number)}
	{#if item.children}
		<details class="group transition-all duration-300 ease-out">
			<summary
				class="section-px nav-item text-title2 text-foreground hover:bg-muted flex cursor-pointer list-none items-center justify-between transition-all select-none group-open:font-medium"
				>{item.label}
				<IconChevronRight class="transition duration-300 ease-out group-open:rotate-90" /></summary
			>
			<ul class="my-3 grid">
				{#each item.children as child, childIndex}
					{@render linkOrGroup(child, childIndex)}
				{/each}
			</ul>
		</details>
	{:else}
		<a
			href={item?.href}
			class="section-px group nav-item hover:bg-muted text-title2 flex flex-col transition-all duration-300 ease-out"
			aria-label={item.label}
		>
			<span
				style:transition-delay="{index * 150}ms"
				class="text-foreground transition-all duration-500 ease-out"
			>
				<span
					style:transition-delay="{index * 50}ms"
					class="inline-block transition duration-300 ease-out">{item.label}</span
				>
			</span>
		</a>
	{/if}
{/snippet}
<style lang="postcss">
	@reference '../../../../app.css';
	.nav-item {
		@apply py-2.5;
	}
	/* Hide default details marker */
	:global(summary::marker),
	:global(summary::-webkit-details-marker) {
		display: none;
	}
</style>
</file>

<file path="src/routes/use-cases/[usecase]/+page.ts">
// Types
import type { PageLoad } from "./$types";
// Use cases can be considered industries depending on the company.
// Types
type UseCase = {
	meta: {
		title: string;
		description: string;
	};
	hero: {
		title: string;
		subtitle: string;
		imageSrc: string;
		callsToAction: Array<{
			href: string;
			label: string;
		}>;
	};
	summary: {
		title: string;
		text: string;
	};
	testimonials: Array<{
		quote: string;
		author: string;
		role: string;
		imageSrc: string;
	}>;
	features: {
		title: string;
		subtitle: string;
		items: Array<{
			title: string;
			description: string;
			icon: string;
		}>;
	};
};
// Constants
const healthcareUseCase: UseCase = {
	meta: {
		title: "Healthcare",
		description: "Healthcare solutions for providers and organizations"
	},
	hero: {
		title: "Healthcare Innovation Platform",
		subtitle: "Empowering providers to deliver better patient care",
		imageSrc:
			"https://images.unsplash.com/photo-1532938911079-1b06ac7ceec7?q=80&w=1920&auto=format&fit=crop",
		callsToAction: [
			{ href: "/demo", label: "Get Started" },
			{ href: "#features", label: "Learn More" }
		]
	},
	summary: {
		title: "Transforming Healthcare Delivery",
		text: "Our platform helps healthcare providers improve patient outcomes, streamline operations, and ensure compliance while reducing administrative burden on clinical staff."
	},
	testimonials: [
		{
			quote: "This solution has revolutionized how we manage patient data and care coordination.",
			author: "Dr. Sarah Williams",
			role: "Chief Medical Officer, Metro Health",
			imageSrc: "/images/testimonials/sarah-williams.jpg"
		},
		{
			quote: "We've seen a 30% reduction in administrative tasks since implementation.",
			author: "Robert Chen",
			role: "Healthcare Administrator, Community Care",
			imageSrc: "/images/testimonials/robert-chen.jpg"
		}
	],
	features: {
		title: "Healthcare Solutions That Make a Difference",
		subtitle: "Purpose-built for modern healthcare challenges",
		items: [
			{
				title: "Patient Engagement",
				description: "Connect with patients through secure messaging and telehealth integration",
				icon: "users"
			},
			{
				title: "Clinical Workflows",
				description: "Streamline documentation and clinical processes for improved efficiency",
				icon: "clipboard-list"
			},
			{
				title: "Data Analytics",
				description: "Gain insights from healthcare data to improve quality measures",
				icon: "chart-bar"
			},
			{
				title: "Compliance Management",
				description: "Stay compliant with HIPAA, HITECH and other healthcare regulations",
				icon: "shield-check"
			}
		]
	},
	cta: {
		title: "Elevate Your Healthcare Practice",
		subtitle: "Join leading healthcare organizations using our platform",
		imageSrc:
			"https://images.unsplash.com/photo-1532938911079-1b06ac7ceec7?q=80&w=1920&auto=format&fit=crop",
		description:
			"Schedule a consultation to see how we can help you improve patient care and operational efficiency.",
		callsToAction: [
			{ href: "/get-started", label: "Get Started", variant: "primary" },
			{ href: "/contact", label: "Talk to Sales", variant: "secondary" }
		]
	}
};
const financeUseCase: UseCase = {
	meta: {
		title: "Finance",
		description: "Financial solutions for institutions and businesses"
	},
	hero: {
		title: "Financial Intelligence Platform",
		subtitle: "Empowering financial decisions with data-driven insights",
		imageSrc:
			"https://images.unsplash.com/photo-1638913662180-afc4334cf422?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
		callsToAction: [
			{ href: "/demo", label: "Get Started" },
			{ href: "#features", label: "Learn More" }
		]
	},
	summary: {
		title: "Revolutionizing Financial Services",
		text: "Our platform enables financial institutions to enhance customer experiences, automate compliance processes, and leverage AI for better risk assessment and investment strategies."
	},
	testimonials: [
		{
			quote:
				"This platform has transformed our risk management approach and increased our efficiency by 50%.",
			author: "James Wilson",
			role: "CTO, Global Investments",
			imageSrc: "/images/testimonials/james-wilson.jpg"
		},
		{
			quote: "The predictive analytics have given us a competitive edge in market analysis.",
			author: "Linda Chang",
			role: "Head of Trading, Apex Capital",
			imageSrc: "/images/testimonials/linda-chang.jpg"
		}
	],
	features: {
		title: "Powerful Financial Tools",
		subtitle: "Comprehensive solutions for modern financial challenges",
		items: [
			{
				title: "Risk Assessment",
				description: "Advanced analytics to identify and mitigate potential risks",
				icon: "chart-line"
			},
			{
				title: "Fraud Detection",
				description: "AI-powered systems to detect unusual patterns and prevent fraud",
				icon: "shield-alert"
			},
			{
				title: "Investment Analysis",
				description: "Data-driven insights for portfolio management and optimization",
				icon: "presentation-chart"
			},
			{
				title: "Regulatory Compliance",
				description: "Automated tools to ensure adherence to financial regulations",
				icon: "document-check"
			}
		]
	},
	cta: {
		title: "Transform Your Financial Services",
		subtitle: "Join leading financial institutions already using our platform",
		imageSrc:
			"https://images.unsplash.com/photo-1638913662180-afc4334cf422?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
		description:
			"Schedule a demo to see how we can help you improve efficiency and customer satisfaction.",
		callsToAction: [
			{ href: "/demo", label: "Request Demo", variant: "primary" },
			{ href: "/pricing", label: "View Solutions", variant: "secondary" }
		]
	}
};
const technologyUseCase: UseCase = {
	meta: {
		title: "Technology",
		description: "Tech solutions for companies of all sizes"
	},
	hero: {
		title: "Technology Innovation Hub",
		subtitle: "Accelerate your digital transformation journey",
		imageSrc:
			"https://images.unsplash.com/photo-1518770660439-4636190af475?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
		callsToAction: [
			{ href: "/demo", label: "Get Started" },
			{ href: "#features", label: "Explore Features" }
		]
	},
	summary: {
		title: "Powering Tech Innovation",
		text: "Our platform helps technology companies streamline development workflows, improve collaboration, and deliver products faster with integrated DevOps tools and AI-powered insights."
	},
	testimonials: [
		{
			quote:
				"This solution has cut our development cycle by 35% and improved code quality significantly.",
			author: "Alex Rivera",
			role: "CTO, FutureTech",
			imageSrc: "/images/testimonials/alex-rivera.jpg"
		},
		{
			quote:
				"The automated testing and deployment features have revolutionized our release process.",
			author: "Priya Sharma",
			role: "VP of Engineering, CodeInnovate",
			imageSrc: "/images/testimonials/priya-sharma.jpg"
		}
	],
	features: {
		title: "Technology Solutions for Modern Teams",
		subtitle: "Tools designed for today's development challenges",
		items: [
			{
				title: "DevOps Integration",
				description: "Seamlessly connect your development and operations workflows",
				icon: "code-bracket"
			},
			{
				title: "AI-Assisted Development",
				description: "Leverage machine learning for code suggestions and bug detection",
				icon: "cpu-chip"
			},
			{
				title: "Collaboration Tools",
				description: "Foster teamwork with real-time communication and sharing features",
				icon: "user-group"
			},
			{
				title: "Performance Monitoring",
				description: "Track application performance and identify optimization opportunities",
				icon: "chart-bar-square"
			}
		]
	},
	cta: {
		title: "Elevate Your Tech Company",
		subtitle: "Join innovative technology companies using our platform",
		imageSrc:
			"https://images.unsplash.com/photo-1518770660439-4636190af475?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
		description: "See how our solutions can help you build better products faster.",
		callsToAction: [
			{ href: "/demo", label: "Schedule Demo", variant: "primary" },
			{ href: "/resources", label: "View Resources", variant: "secondary" }
		]
	}
};
const educationUseCase = {
	meta: {
		title: "Education",
		description: "Educational solutions for institutions of all levels"
	},
	hero: {
		title: "Education Transformation Platform",
		subtitle: "Empowering educators and students in the digital age",
		imageSrc:
			"https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
		callsToAction: [
			{ href: "/demo", label: "Get Started" },
			{ href: "#features", label: "Learn More" }
		]
	},
	summary: {
		title: "Reimagining Education",
		text: "Our platform helps educational institutions create engaging learning experiences, streamline administrative tasks, and leverage data analytics to improve student outcomes and educator effectiveness."
	},
	testimonials: [
		{
			quote:
				"This platform has transformed how we deliver curriculum and engage with our students.",
			author: "Dr. Emily Rodriguez",
			role: "Superintendent, Westview School District",
			imageSrc: "/images/testimonials/emily-rodriguez.jpg"
		},
		{
			quote:
				"The analytics capabilities have helped us identify at-risk students and intervene earlier.",
			author: "Professor Thomas Lee",
			role: "Dean of Students, Horizon University",
			imageSrc: "/images/testimonials/thomas-lee.jpg"
		}
	],
	features: {
		title: "Educational Tools for Modern Learning",
		subtitle: "Comprehensive solutions for today's educational challenges",
		items: [
			{
				title: "Interactive Learning",
				description: "Create engaging content that adapts to individual student needs",
				icon: "academic-cap"
			},
			{
				title: "Assessment Tools",
				description: "Measure learning outcomes with diverse evaluation methods",
				icon: "clipboard-document-check"
			},
			{
				title: "Student Analytics",
				description: "Track progress and identify opportunities for intervention",
				icon: "chart-pie"
			},
			{
				title: "Administrative Automation",
				description: "Streamline operations from enrollment to grade management",
				icon: "cog"
			}
		]
	},
	cta: {
		title: "Transform Your Educational Institution",
		subtitle: "Join leading schools and universities using our platform",
		imageSrc:
			"https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
		description:
			"Schedule a demo to see how we can help improve learning outcomes and institutional efficiency.",
		callsToAction: [
			{ href: "/demo", label: "Request Demo", variant: "primary" },
			{ href: "/case-studies", label: "View Case Studies", variant: "secondary" }
		]
	}
};
const useCases: Record<string, UseCase> = {
	healthcare: healthcareUseCase,
	finance: financeUseCase,
	technology: technologyUseCase,
	education: educationUseCase
};
export const load: PageLoad = async ({ params }) => {
	const { usecase } = params;
	if (!usecase || !(usecase in useCases)) {
		return {};
	}
	return useCases[usecase as keyof typeof useCases] ?? healthcare;
};
</file>

<file path="src/lib/components/layout/Nav.svelte">
<script lang="ts">
	// Components
	import MobileNav from "./sub/MobileNav.svelte";
	import DesktopNav from "./sub/DesktopNav.svelte";
	import Logo from "../Logo.svelte";
	// Utils
	import { MediaQuery } from "svelte/reactivity";
	import { navHeight } from "$lib/state/nav.svelte";
	import { scrollY } from "svelte/reactivity/window";
	import { CONFIG } from "$lib/content";
	import { navigation } from "$lib/navigation";
	// State
	const touch = new MediaQuery("(hover: none) and (pointer: coarse)");
	const mobile = new MediaQuery("(max-width: 768px)");
	const DURATION = 500;
	const navItems = $derived(
		navigation
			.filter((item) => item.showInNav)
			.map((item) => {
				if (!item.children) return item;
				return {
					...item,
					children: item.children.filter((child) => child.showInNav !== false)
				};
			})
	);
</script>
<div
	bind:clientHeight={navHeight.current}
	class={[
		"sticky top-0 left-0 z-50 border-b backdrop-blur-lg transition",
		scrollY.current !== 0 ? "border-border bg-background/95" : "bg-background border-transparent"
	]}
	style:--tw-duration="{DURATION}ms"
>
	<div class="section-px container mx-auto grid grid-cols-[auto_1fr] gap-8 py-3">
		<a href="/" class="flex items-center gap-3.5">
			<Logo class="z-50 size-7" />
			<span class="font-medium">{CONFIG.companyName}</span>
		</a>
		<!-- items + cta -->
		<div class="">
			{#if mobile?.current}
				<div class="lg:hidden">
					<MobileNav items={navItems} />
				</div>
			{:else}
				<hidden class="lg-block">
					<DesktopNav items={navItems} />
				</hidden>
			{/if}
		</div>
	</div>
</div>
</file>

</files>
